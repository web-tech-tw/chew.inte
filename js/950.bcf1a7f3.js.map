{"version":3,"file":"js/950.bcf1a7f3.js","mappings":"8JAAA,IAAIA,EAAS,WAAkB,IAAIC,EAAIC,KAAKC,EAAGF,EAAIG,MAAMD,GAAG,OAAOA,EAAG,MAAM,CAACE,YAAY,8BAA8B,CAAGJ,EAAIK,OAAy/BH,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,YAAY,gBAAgB,CAACF,EAAG,KAAK,CAACE,YAAY,gCAAgC,CAACJ,EAAIM,GAAG,WAAWJ,EAAG,OAAO,CAACE,YAAY,4EAA4E,CAACJ,EAAIM,GAAG,IAAIN,EAAIO,GAAGP,EAAIK,OAAOG,KAAK,WAAhvCN,EAAG,MAAM,CAAEF,EAAIS,SAAUP,EAAG,MAAM,CAACA,EAAG,eAAe,CAACE,YAAY,cAAcM,MAAM,CAAC,UAAYV,EAAIW,YAAY,eAAe,IAAIC,MAAM,CAACC,MAAOb,EAAIc,QAASC,SAAS,SAAUC,GAAMhB,EAAIc,QAAQE,CAAI,EAACC,WAAW,cAAc,GAAGf,EAAG,MAAM,CAACA,EAAG,WAAW,CAACgB,WAAW,CAAC,CAACC,KAAK,QAAQC,QAAQ,UAAUP,MAAOb,EAAIc,QAASG,WAAW,YAAYb,YAAY,wPAAwPiB,SAAS,CAAC,MAASrB,EAAIc,SAAUQ,GAAG,CAAC,MAAQ,SAASC,GAAWA,EAAOC,OAAOC,YAAiBzB,EAAIc,QAAQS,EAAOC,OAAOX,MAAM,OAAMX,EAAG,SAAS,CAACE,YAAY,kMAAkMkB,GAAG,CAAC,MAAQtB,EAAI0B,eAAe,CAAC1B,EAAIM,GAAG,eACxmC,EACGqB,EAAkB,G,0NCCtB,IAAMC,EAAgB,GAChBC,EAAc,EACdC,EAAoB,EACpBC,EAAY,GACZC,EAAY,GACZC,EAAY,GACZC,EAAiB,GACjBC,EAAmB,IACnBC,EAAgB,IAChBC,EAAqB,IACrBC,EAAiB,GAEjBC,EAAgB,IAChBC,EAAmB,IAEnBC,EAA8B,qBAAXC,QAA0BC,WAAjC,OAAqDC,KAAKD,UAAUE,UAChFC,EAA8B,qBAAXJ,QAA0BC,WAAjC,0BAAwEC,KAAKD,UAAUE,UAwB5FE,EAAcC,EAAAA,GAAAA,OAAW,CACpCC,MAAO,CACLC,YAAa,CACXC,KAAMC,QACNC,SAAS,GAEXC,qBAAsB,CACpBH,KAAMC,QACNC,SAAS,GAEXE,SAAU,CACRJ,KAAMC,QACNC,SAAS,GAEXxC,MAAO,CACLsC,KAAMK,OACNH,QAAS,IAEXI,UAAW,CACTN,KAAMO,SACNC,UAAU,GAEZC,QAAS,CACPT,KAAMU,OACNR,QAAS,GAEXS,aAAc,CACZX,KAAMC,QACNC,SAAS,GAEXU,aAAc,CACZZ,KAAMC,QACNC,SAAS,GAEXW,YAAa,CACXb,KAAMK,OACNH,QAAS,KAGbY,KAvCoC,WAwClC,MAAO,CACLC,SAAS,EACTC,QAAS,CACPC,MAAO,GACPC,QAAS,GAEXC,kBAAmB,OACnBC,SAAU,GA/CsB,EAkDpCC,MAAO,CACL3D,MAAO,CACL4D,WAAW,EACXC,QAFK,SAEGC,GAIJ1E,KAAKsE,SAHFI,GACa,EAInB,GAEH7D,QAAS,CACP2D,WAAW,EACXC,QAFO,W,WAGDzE,KAAKiD,aACPjD,KAAK2E,WAAU,WACbC,EAAKC,sBADP,GAIH,GAEH5B,YArBK,W,WAsBHjD,KAAK2E,WAAU,WACbG,EAAKC,mBACLD,EAAKD,sBAFP,GAID,GAEHG,SAAU,CACRC,QADQ,WAEN,OAAgC,IAAzBjF,KAAKsE,SAASY,MAFf,EAIRrE,QAJQ,WAKN,IAAMT,EAASJ,KAAKwD,UAAUxD,KAAKsE,UAAY,SAE/C,OAAOlE,CAPD,EASR+E,iBATQ,WAUN,IAAMC,EAAapF,KAAKsE,SAASe,MAAM,WAAWH,OAClD,OAAOE,CACR,GAEHE,QA5FoC,WA6FlCtF,KAAKuF,sBACLvF,KAAK+E,kBA9F6B,EAiGpCS,QAAS,CACPX,qBADO,WAEL7E,KAAKqE,kBAAoBoB,iBAAiBzF,KAAK0F,MAAMC,KAA4BC,MAF5E,EAIPb,iBAJO,WAKL,GAAK/E,KAAKiD,aAAgBjD,KAAKqD,qBAA/B,CAEA,IAAMwC,EAAU7F,KAAK0F,MAAMC,IACrBG,EAAsC9F,KAAK+F,IAAIC,cAAc,+BAC7DC,EAAexD,OAAOgD,iBAAiBI,GAE7C7F,KAAK2E,WAAU,WACb,IAAMuB,EAAY,yBACZC,EAAY,4BAClB,GAAKL,EAAL,CACAA,EAAaM,MAAMF,GAAQD,EAAaC,GACxCJ,EAAaM,MAAMD,GAAQF,EAAaE,GACxCN,EAAQO,MAAMF,GAAQ,IACtBL,EAAQO,MAAMD,GAAQ,IAEtB,IAAME,EAAa,CAAC,mBAAoB,aAAc,cAAe,cAAe,YAAa,eACjGA,EAAWC,SAAQ,SAACF,GAClBN,EAAaM,MAAMA,GAASH,EAAaG,EAD3C,IAGAN,EAAaM,MAAM,iBAA0B,IAAMH,EAAa,cAVvC,CAH3B,GAN2D,CALtD,EA2BPV,oBA3BO,WA4BL,IAAMgB,EAAQvG,KAAK0F,MAAMc,SAEzB,GAAKD,EAAL,C,IAEQ3F,EAAwC2F,EAAxC3F,MAAO6F,EAAiCF,EAAjCE,eAAgBC,EAAiBH,EAAjBG,aAE/B1G,KAAK2G,cAAc,CACjB/F,MAAAA,EACA6F,eAAAA,EACAC,aAAAA,GAPgB,CA9Bb,EAwCPE,UAxCO,SAwCGC,EAAcC,GACtB,OAAOD,EAAKE,UAAU,EAAGD,GAAUzB,MAAM,KAzCpC,EA2CP2B,YA3CO,SA2CKC,GAEV,IAAMV,EAAQvG,KAAK0F,MAAMc,SACnBU,EAAOlH,KAAKkE,QAAQC,MAAMnE,KAAKkE,QAAQE,QAEzC8C,GAAQX,IACVvG,KAAKkE,QAAQC,MAAMnE,KAAKkE,QAAQE,QAAhC,KACK8C,EADL,CAEET,eAAgBF,EAAME,eACtBC,aAAcH,EAAMG,gBAKxB1G,KAAK2G,cAAcM,GACnBjH,KAAKmH,aAAaF,EA1Db,EA4DPN,cA5DO,SA4DOM,EAAgBG,QAAAA,IAAAA,IAAAA,GAAY,G,MACdpH,KAAKkE,QAAvBC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAEf,GAAID,EAAMe,QAAUd,GAAU,EAAG,CAE/BpE,KAAKkE,QAAQC,MAAQA,EAAMkD,MAAM,EAAGjD,EAAS,GAG7C,IAAMkD,EAAQtH,KAAKkE,QAAQC,MAAMe,OAEjC,GAAIoC,EAAQhF,EAAe,CACzB,IAAMiF,EAASD,EAAQhF,EAEvBtC,KAAKkE,QAAQC,MAAQA,EAAMkD,MAAME,EAAQD,GACzCtH,KAAKkE,QAAQE,OAASoD,KAAKC,IAAIzH,KAAKkE,QAAQE,OAASmD,EAAQ,EAC9D,CACF,CAED,IAAMG,EAAYC,KAAKC,MAEvB,GAAIR,EAAW,CACb,IAAMF,EAAOlH,KAAKkE,QAAQC,MAAMnE,KAAKkE,QAAQE,QAE7C,GAAI8C,GAAQQ,EAAYR,EAAKQ,UAAYnF,EAAkB,SAInDsF,EAAK,yBAGLC,EAAQ,UAAG9H,KAAK4G,UAAUM,EAAKtG,MAAOsG,EAAKT,gBAAgBsB,aAAnD,aAAGC,EAAuDC,MAAMJ,GAGxEK,EAAO,UAAGlI,KAAK4G,UAAUK,EAAOrG,MAAOqG,EAAOR,gBAAgBsB,aAAvD,aAAGI,EAA2DF,MAAMJ,GAEjF,GAAIC,GAAYI,GAAWA,EAAQ,GAAGE,WAAWN,EAAS,IAQxD,YALA9H,KAAKkE,QAAQC,MAAMnE,KAAKkE,QAAQE,QAAhC,KACK6C,EADL,CAEES,UAAAA,IAKL,CACF,CAGD1H,KAAKkE,QAAQC,MAAMkE,KAAnB,KAA6BpB,EAA7B,CAAqCS,UAAAA,KACrC1H,KAAKkE,QAAQE,QA9GR,EAiHP+C,aAjHO,SAiHMF,GACX,IAAMV,EAAQvG,KAAK0F,MAAMc,SAEpBD,IAGLA,EAAM3F,MAAQqG,EAAOrG,MACrB2F,EAAME,eAAiBQ,EAAOR,eAC9BF,EAAMG,aAAeO,EAAOP,aAE5B1G,KAAKsI,MAAM,QAASrB,EAAOrG,OA3HtB,EA8HP2H,aA9HO,SA8HMC,G,MACqCA,EAAEjH,OAA1CX,EAAAA,EAAAA,MAAO6F,EAAAA,EAAAA,eAAgBC,EAAAA,EAAAA,aAE/B1G,KAAK2G,cACH,CACE/F,MAAAA,EACA6F,eAAAA,EACAC,aAAAA,IAEF,GAEF1G,KAAKsI,MAAM,QAAS1H,EAzIf,EA4IP6H,UA5IO,W,MA6IqBzI,KAAKkE,QAAvBC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAGT6C,EAAS9C,EAAMC,EAAS,GAE1B6C,IAEFjH,KAAKmH,aAAaF,GAClBjH,KAAKkE,QAAQE,OAASoD,KAAKC,IAAIrD,EAAS,EAAG,GArJxC,EAwJPsE,UAxJO,W,MAyJqB1I,KAAKkE,QAAvBC,EAAAA,EAAAA,MAAOC,EAAAA,EAAAA,OAGT6C,EAAS9C,EAAMC,EAAS,GAE1B6C,IAEFjH,KAAKmH,aAAaF,GAClBjH,KAAKkE,QAAQE,OAASoD,KAAKmB,IAAIvE,EAAS,EAAGD,EAAMe,OAAS,GAjKvD,EAoKP0D,cApKO,SAoKOJ,G,IAEJ7E,EAAwC3D,KAAxC2D,QAASE,EAA+B7D,KAA/B6D,aAAcC,EAAiB9D,KAAjB8D,aAE/B,IAAI9D,KAAK6I,WAAWC,UAElB9I,KAAKsI,MAAM,UAAWE,IAElBA,EAAEO,kBAJR,CASIP,EAAEQ,UAAY3G,IACMmG,EAAEjH,OAAQ0H,OAChCjJ,KAAKsI,MAAM,OAAQE,I,MAG2BA,EAAEjH,OAA1CX,EAAAA,EAAAA,MAAO6F,EAAAA,EAAAA,eAAgBC,EAAAA,EAAAA,aAEzBwC,GAAgBrF,EAAe,IAAM,MAAMsF,OAAOxF,GAExD,GAAI6E,EAAEQ,UAAYpH,IAAgBkC,GAAgB9D,KAAKiE,QAIrD,GAFAuE,EAAEY,iBAEEZ,EAAEa,SAAU,CAEd,IAAMC,EAAmBtJ,KAAK4G,UAAUhG,EAAO6F,GACzC8C,EAAYD,EAAiBpE,OAAS,EACtCsE,EAAUxJ,KAAK4G,UAAUhG,EAAO8F,GAAcxB,OAAS,EACvDuE,EAAY7I,EACfyE,MAAM,MACNqE,KAAI,SAACC,EAAMC,GACV,OAAIA,GAAKL,GAAaK,GAAKJ,GAAWG,EAAKvB,WAAWc,GAC7CS,EAAK5C,UAAUmC,EAAahE,QAG9ByE,CAPO,IASfE,KAAK,MAER,GAAIjJ,IAAU6I,EAAW,CACvB,IAAMK,EAAgBR,EAAiBC,GAEvCvJ,KAAKgH,YAAY,CACfpG,MAAO6I,EAGPhD,eAAgBqD,EAAc1B,WAAWc,GACrCzC,EAAiByC,EAAahE,OAC9BuB,EAEJC,aAAcA,GAAgB9F,EAAMsE,OAASuE,EAAUvE,SAE1D,CA7BH,MA8BO,GAAIuB,IAAmBC,EAAc,CAE1C,IAAM4C,EAAmBtJ,KAAK4G,UAAUhG,EAAO6F,GACzC8C,EAAYD,EAAiBpE,OAAS,EACtCsE,EAAUxJ,KAAK4G,UAAUhG,EAAO8F,GAAcxB,OAAS,EACvD4E,EAAgBR,EAAiBC,GAEvCvJ,KAAKgH,YAAY,CACfpG,MAAOA,EACJyE,MAAM,MACNqE,KAAI,SAACC,EAAMC,GACV,OAAIA,GAAKL,GAAaK,GAAKJ,EAClBN,EAAeS,EAGjBA,CAPJ,IASJE,KAAK,MAGRpD,eAAgB,KAAK9D,KAAKmH,GAAiBrD,EAAiByC,EAAahE,OAASuB,EAElFC,aAAcA,EAAewC,EAAahE,QAAUsE,EAAUD,EAAY,IAtBvE,KAwBA,CACL,IAAMQ,EAAmBtD,EAAiByC,EAAahE,OAEvDlF,KAAKgH,YAAY,CAEfpG,MAAOA,EAAMmG,UAAU,EAAGN,GAAkByC,EAAetI,EAAMmG,UAAUL,GAE3ED,eAAgBsD,EAChBrD,aAAcqD,GAEjB,MACI,GAAIvB,EAAEQ,UAAYnH,EAAmB,CAC1C,IAAMmI,EAAevD,IAAmBC,EAClCuD,EAAkBrJ,EAAMmG,UAAU,EAAGN,GAE3C,GAAIwD,EAAgBC,SAAShB,KAAkBc,EAAc,CAE3DxB,EAAEY,iBAEF,IAAMW,EAAmBtD,EAAiByC,EAAahE,OAEvDlF,KAAKgH,YAAY,CAEfpG,MAAOA,EAAMmG,UAAU,EAAGN,EAAiByC,EAAahE,QAAUtE,EAAMmG,UAAUL,GAElFD,eAAgBsD,EAChBrD,aAAcqD,GAEjB,CAjBI,MAkBA,GAAIvB,EAAEQ,UAAYrH,GAEvB,GAAI8E,IAAmBC,EAAc,CAEnC,IAAMiD,EAAO3J,KAAK4G,UAAUhG,EAAO6F,GAAgBsB,MAC7CoC,EAAO,OAAGR,QAAH,IAAGA,OAAH,EAAGA,EAAM1B,MAAM,QAE5B,GAAIkC,GAAWA,EAAQ,GAAI,CACzB3B,EAAEY,iBAGF,IAAMgB,EAAS,KAAOD,EAAQ,GACxBJ,EAAmBtD,EAAiB2D,EAAOlF,OAEjDlF,KAAKgH,YAAY,CAEfpG,MAAOA,EAAMmG,UAAU,EAAGN,GAAkB2D,EAASxJ,EAAMmG,UAAUL,GAErED,eAAgBsD,EAChBrD,aAAcqD,GAEjB,CACF,OACI,GACLvB,EAAEQ,UAAY/G,GACduG,EAAEQ,UAAY9G,GACdsG,EAAEQ,UAAY7G,GACdqG,EAAEQ,UAAY5G,EACd,CACA,IAAIiI,EAEA7B,EAAEQ,UAAY/G,GAAkBuG,EAAEa,SACpCgB,EAAQ,CAAC,IAAK,KACL7B,EAAEQ,UAAY9G,EAErBmI,EADE7B,EAAEa,SACI,CAAC,IAAK,KAEN,CAAC,IAAK,KAEPb,EAAEQ,UAAY7G,EAErBkI,EADE7B,EAAEa,SACI,CAAC,IAAK,KAEN,CAAC,IAAK,KAEPb,EAAEQ,UAAY5G,GAAuBoG,EAAEa,WAChDgB,EAAQ,CAAC,IAAK,MAMZ5D,IAAmBC,GAAgB2D,IACrC7B,EAAEY,iBAEFpJ,KAAKgH,YAAY,CACfpG,MACEA,EAAMmG,UAAU,EAAGN,GACnB4D,EAAM,GACNzJ,EAAMmG,UAAUN,EAAgBC,GAChC2D,EAAM,GACNzJ,EAAMmG,UAAUL,GAElBD,eAAAA,EACAC,aAAcA,EAAe,IAzC5B,OA6CJ7D,EAEG2F,EAAE8B,SAAW9B,EAAEQ,UAAYjH,EAE3ByG,EAAE+B,SAAW/B,EAAEQ,UAAYjH,IAC9ByG,EAAEa,UACFb,EAAEgC,QAMF3H,EAEG2F,EAAE8B,SAAW9B,EAAEQ,UAAYjH,GAAayG,EAAEa,SAC1C7G,EAEAgG,EAAE+B,SAAW/B,EAAEQ,UAAYlH,EAE3B0G,EAAE+B,SAAW/B,EAAEQ,UAAYjH,GAAayG,EAAEa,YAC7Cb,EAAEgC,QAEHhC,EAAEY,iBAEFpJ,KAAK0I,aACIF,EAAEQ,UAAYhH,IAAawG,EAAE+B,SAAY1H,IAAY2F,EAAEa,WAChEb,EAAEY,iBAGFpJ,KAAKiE,SAAWjE,KAAKiE,UArBrBuE,EAAEY,iBAEFpJ,KAAKyI,YAhLN,CAqMF,GAEH3I,OAvdoC,SAud7B2K,G,WACCC,EAA4BD,EAChC,MACA,CACEhK,MAAO,CACLkK,MAAO,gCACPvE,MAAO,2DAGX,OAEInD,EAAcwH,EAClB,MACA,CACEtK,YAAa,6BACbiG,MAAO,CACL,aAAcpG,KAAKqE,mBAErB5D,MAAO,CACL,cAAe,SAGnB,CACEiK,EACAE,MAAMC,KAAKD,MAAM5K,KAAKmF,kBAAkB2F,QAAQpB,KAAI,SAACqB,EAAGC,GACtD,OAAOP,EAAE,MAAO,CAAEhK,MAAO,CAAEkK,MAAO,4CAA1B,MAA8EK,EADxF,MAMExE,EAAWiE,EAAE,WAAY,CAC7BQ,IAAK,WACL5J,GAAI,CACFkF,MAAOvG,KAAKuI,aACZO,QAAS9I,KAAK4I,cACdsC,MAAO,SAAC5J,GACN6J,EAAK7C,MAAM,QAAShH,EAJpB,EAMF8J,MAAO,SAAC9J,GACN6J,EAAK7C,MAAM,QAAShH,EAPpB,EASF+J,MAAO,SAAC/J,GACN6J,EAAK7C,MAAM,QAAShH,EAVpB,EAYF2H,KAAM,SAAC3H,GACL6J,EAAK7C,MAAM,OAAQhH,EACpB,GAEHnB,YAAa,yBACbwK,MAAO,CACL,gCAAiC3K,KAAKiF,SAExCxE,MAAO,CACL6K,WAAY,QACZC,eAAgB,MAChBC,aAAc,MACdC,YAAa,MACb,aAAc,QACd1H,YAAa/D,KAAK+D,YAClB,cAAe,WACfT,SAAUtD,KAAKsD,UAEjBlC,SAAU,CACRR,MAAOZ,KAAKsE,YAGVoH,EAAUjB,EAAE,MAAO,CACvBQ,IAAK,MACL9K,YAAa,uBACbM,MAAO,CACL,cAAe,WAEjBW,SAAU,CACRuK,UAAW3L,KAAKa,WAGd+K,EAAkBnB,EAAE,MAAO,CAAEtK,YAAa,2BAA6B,CAACqG,EAAUkF,IACxF,OAAOjB,EAAE,MAAO,CAAEtK,YAAa,wBAA0B,CAACH,KAAKiD,aAAeA,EAAa2I,GAC5F,I,UCrfH,G,gBAAA,CACA1K,KAAAA,aACA2K,WAAAA,CACA/I,YAAAA,GAEAkB,KAAAA,KAAAA,CACAxD,UAAAA,EACAK,QAAAA,GACAT,OAAAA,KAEAoF,QAAAA,CACA9E,YAAAA,GACA,uCACA,EACA,qBACA,4BACAoL,EAAAA,OAAAA,UAAAA,KAAAA,SACA,+CACA,kBACA,KC9G0P,I,UCQtPC,GAAY,OACd,EACAjM,EACA4B,GACA,EACA,KACA,KACA,MAIF,EAAeqK,EAAiB,O,kBCnBhCC,MAAMC,UAAUC,MAAQ,CACvB,QAAW,CACV,CACCC,QAAS,kCACTC,YAAY,EACZC,QAAQ,GAET,CACCF,QAAS,mBACTC,YAAY,EACZC,QAAQ,IAGV,OAAU,CACTF,QAAS,iDACTE,QAAQ,GAET,aAAc,CACbF,QAAS,2FACTC,YAAY,EACZE,OAAQ,CACP,YAAe,UAGjB,QAAW,6GACX,QAAW,qBACX,SAAY,cACZ,OAAU,4DACV,SAAY,+CACZ,YAAe,gB,+BC3BhB,IAAIpM,EAA2B,qBAAXuC,OACjBA,OAE6B,qBAAtB8J,mBAAqCC,gBAAgBD,kBAC1DC,KACA,CAAC,EAWFR,EAAS,SAAU9L,GAGtB,IAAIuM,EAAO,0CACPC,EAAW,EAGXC,EAAmB,CAAC,EAGpB5B,EAAI,CAsBP6B,OAAQ1M,EAAM8L,OAAS9L,EAAM8L,MAAMY,OAsBnCC,4BAA6B3M,EAAM8L,OAAS9L,EAAM8L,MAAMa,4BAWxDC,KAAM,CACLC,OAAQ,SAASA,EAAOC,GACvB,OAAIA,aAAkBC,EACd,IAAIA,EAAMD,EAAO9J,KAAM6J,EAAOC,EAAOnM,SAAUmM,EAAOE,OACnDtC,MAAMuC,QAAQH,GACjBA,EAAOtD,IAAIqD,GAEXC,EAAOI,QAAQ,KAAM,SAASA,QAAQ,KAAM,QAAQA,QAAQ,UAAW,IAE/E,EAkBDlK,KAAM,SAAUmK,GACf,OAAOC,OAAOC,UAAUC,SAASC,KAAKJ,GAAGhG,MAAM,GAAI,EACnD,EAQDqG,MAAO,SAAUC,GAIhB,OAHKA,EAAI,SACRL,OAAOM,eAAeD,EAAK,OAAQ,CAAE/M,QAAS8L,IAExCiB,EAAI,OACX,EAYDE,MAAO,SAASC,EAAUT,EAAGU,GAG5B,IAAIF,EAAWG,EACf,OAHAD,EAAUA,GAAW,CAAC,EAGdhD,EAAE+B,KAAK5J,KAAKmK,IACnB,IAAK,SAEJ,GADAW,EAAKjD,EAAE+B,KAAKY,MAAML,GACdU,EAAQC,GACX,OAAOD,EAAQC,GAKhB,IAAK,IAAIC,KAHTJ,EAA4C,CAAC,EAC7CE,EAAQC,GAAMH,EAEER,EACXA,EAAEa,eAAeD,KACpBJ,EAAMI,GAAOH,EAAUT,EAAEY,GAAMF,IAIjC,OAAO,EAER,IAAK,QAEJ,OADAC,EAAKjD,EAAE+B,KAAKY,MAAML,GACdU,EAAQC,GACJD,EAAQC,IAEhBH,EAAQ,GACRE,EAAQC,GAAMH,EAE2BR,EAAK/G,SAAQ,SAAU6H,EAAGvE,GAClEiE,EAAMjE,GAAKkE,EAAUK,EAAGJ,EACxB,IAEM,GAER,QACC,OAAOV,EAET,EAUDe,YAAa,SAAUC,GACtB,MAAOA,EAAS,CACf,IAAIC,EAAI7B,EAAK8B,KAAKF,EAAQG,WAC1B,GAAIF,EACH,OAAOA,EAAE,GAAGG,cAEbJ,EAAUA,EAAQK,aAClB,CACD,MAAO,MACP,EASDC,YAAa,SAAUN,EAASO,GAG/BP,EAAQG,UAAYH,EAAQG,UAAUpB,QAAQyB,OAAOpC,EAAM,MAAO,IAIlE4B,EAAQS,UAAUC,IAAI,YAAcH,EACpC,EASDI,cAAe,WACd,GAAwB,qBAAbC,SACV,OAAO,KAER,GAAI,kBAAmBA,SACtB,OAA2BA,SAA3B,cAOD,IACC,MAAM,IAAIC,KAmBV,CAlBC,MAAOC,GAQR,IAAIC,GAAO,qCAAqCb,KAAKY,EAAIhL,QAAU,IAAI,GACvE,GAAIiL,EAAK,CACR,IAAIC,EAAUJ,SAASK,qBAAqB,UAC5C,IAAK,IAAI1F,KAAKyF,EACb,GAAIA,EAAQzF,GAAGwF,KAAOA,EACrB,OAAOC,EAAQzF,EAGjB,CACD,OAAO,IACP,CACD,EAqBD2F,SAAU,SAAUlB,EAASG,EAAWgB,GACvC,IAAIC,EAAK,MAAQjB,EAEjB,MAAOH,EAAS,CACf,IAAIS,EAAYT,EAAQS,UACxB,GAAIA,EAAUY,SAASlB,GACtB,OAAO,EAER,GAAIM,EAAUY,SAASD,GACtB,OAAO,EAERpB,EAAUA,EAAQK,aAClB,CACD,QAASc,CACT,GAUFvD,UAAW,CAIV0D,MAAOhD,EACPiD,UAAWjD,EACX9F,KAAM8F,EACNkD,IAAKlD,EA8BLmD,OAAQ,SAAU9B,EAAI+B,GACrB,IAAItD,EAAO1B,EAAE+B,KAAKe,MAAM9C,EAAEkB,UAAU+B,IAEpC,IAAK,IAAIC,KAAO8B,EACftD,EAAKwB,GAAO8B,EAAM9B,GAGnB,OAAOxB,CACP,EA6EDuD,aAAc,SAAU1D,EAAQ2D,EAAQC,EAAQC,GAC/CA,EAAOA,GAA4BpF,EAAEkB,UACrC,IAAImE,EAAUD,EAAK7D,GAEf+D,EAAM,CAAC,EAEX,IAAK,IAAIC,KAASF,EACjB,GAAIA,EAAQlC,eAAeoC,GAAQ,CAElC,GAAIA,GAASL,EACZ,IAAK,IAAIM,KAAYL,EAChBA,EAAOhC,eAAeqC,KACzBF,EAAIE,GAAYL,EAAOK,IAMrBL,EAAOhC,eAAeoC,KAC1BD,EAAIC,GAASF,EAAQE,GAEtB,CAGF,IAAIE,EAAML,EAAK7D,GAUf,OATA6D,EAAK7D,GAAU+D,EAGftF,EAAEkB,UAAUwE,IAAI1F,EAAEkB,WAAW,SAAUgC,EAAKrN,GACvCA,IAAU4P,GAAOvC,GAAO3B,IAC3BtM,KAAKiO,GAAOoC,EAEb,IAEMA,CACP,EAGDI,IAAK,SAASA,EAAIpD,EAAGvM,EAAUoC,EAAM6K,GACpCA,EAAUA,GAAW,CAAC,EAEtB,IAAIL,EAAQ3C,EAAE+B,KAAKY,MAEnB,IAAK,IAAI9D,KAAKyD,EACb,GAAIA,EAAEa,eAAetE,GAAI,CACxB9I,EAAS2M,KAAKJ,EAAGzD,EAAGyD,EAAEzD,GAAI1G,GAAQ0G,GAElC,IAAI8G,EAAWrD,EAAEzD,GACb+G,EAAe5F,EAAE+B,KAAK5J,KAAKwN,GAEV,WAAjBC,GAA8B5C,EAAQL,EAAMgD,IAGpB,UAAjBC,GAA6B5C,EAAQL,EAAMgD,MACrD3C,EAAQL,EAAMgD,KAAa,EAC3BD,EAAIC,EAAU5P,EAAU8I,EAAGmE,KAJ3BA,EAAQL,EAAMgD,KAAa,EAC3BD,EAAIC,EAAU5P,EAAU,KAAMiN,GAK/B,CAEF,GAGF6C,QAAS,CAAC,EAcVC,aAAc,SAAUC,EAAOhQ,GAC9BiK,EAAEgG,kBAAkB9B,SAAU6B,EAAOhQ,EACrC,EAiBDiQ,kBAAmB,SAAUC,EAAWF,EAAOhQ,GAC9C,IAAImQ,EAAM,CACTnQ,SAAUA,EACVkQ,UAAWA,EACXE,SAAU,oGAGXnG,EAAEoG,MAAMC,IAAI,sBAAuBH,GAEnCA,EAAII,SAAWzG,MAAM2C,UAAUlG,MAAMiK,MAAML,EAAID,UAAUO,iBAAiBN,EAAIC,WAE9EnG,EAAEoG,MAAMC,IAAI,gCAAiCH,GAE7C,IAAK,IAAW5C,EAAPzE,EAAI,EAAayE,EAAU4C,EAAII,SAASzH,MAChDmB,EAAEyG,iBAAiBnD,GAAmB,IAAVyC,EAAgBG,EAAInQ,SAEjD,EA8BD0Q,iBAAkB,SAAUnD,EAASyC,EAAOhQ,GAE3C,IAAI8N,EAAW7D,EAAE+B,KAAKsB,YAAYC,GAC9B+B,EAAUrF,EAAEkB,UAAU2C,GAG1B7D,EAAE+B,KAAK6B,YAAYN,EAASO,GAG5B,IAAI6C,EAASpD,EAAQK,cACjB+C,GAA4C,QAAlCA,EAAOC,SAASjD,eAC7B1D,EAAE+B,KAAK6B,YAAY8C,EAAQ7C,GAG5B,IAAI+C,EAAOtD,EAAQuD,YAEfX,EAAM,CACT5C,QAASA,EACTO,SAAUA,EACVwB,QAASA,EACTuB,KAAMA,GAGP,SAASE,EAAsBC,GAC9Bb,EAAIa,gBAAkBA,EAEtB/G,EAAEoG,MAAMC,IAAI,gBAAiBH,GAE7BA,EAAI5C,QAAQ1C,UAAYsF,EAAIa,gBAE5B/G,EAAEoG,MAAMC,IAAI,kBAAmBH,GAC/BlG,EAAEoG,MAAMC,IAAI,WAAYH,GACxBnQ,GAAYA,EAAS2M,KAAKwD,EAAI5C,QAC9B,CAUD,GARAtD,EAAEoG,MAAMC,IAAI,sBAAuBH,GAGnCQ,EAASR,EAAI5C,QAAQK,cACjB+C,GAA4C,QAAlCA,EAAOC,SAASjD,gBAA4BgD,EAAOM,aAAa,aAC7EN,EAAOO,aAAa,WAAY,MAG5Bf,EAAIU,KAGR,OAFA5G,EAAEoG,MAAMC,IAAI,WAAYH,QACxBnQ,GAAYA,EAAS2M,KAAKwD,EAAI5C,UAM/B,GAFAtD,EAAEoG,MAAMC,IAAI,mBAAoBH,GAE3BA,EAAIb,QAKT,GAAIU,GAAS5Q,EAAM+R,OAAQ,CAC1B,IAAIC,EAAS,IAAID,OAAOlH,EAAEoH,UAE1BD,EAAOE,UAAY,SAAUC,GAC5BR,EAAsBQ,EAAIrO,KAC1B,EAEDkO,EAAOI,YAAYC,KAAKC,UAAU,CACjC5D,SAAUqC,EAAIrC,SACd+C,KAAMV,EAAIU,KACVc,gBAAgB,IAEjB,MACAZ,EAAsB9G,EAAEvH,UAAUyN,EAAIU,KAAMV,EAAIb,QAASa,EAAIrC,gBAjB7DiD,EAAsB9G,EAAE+B,KAAKC,OAAOkE,EAAIU,MAmBzC,EAsBDnO,UAAW,SAAUqD,EAAMuJ,EAASxB,GACnC,IAAIqC,EAAM,CACTU,KAAM9K,EACNuJ,QAASA,EACTxB,SAAUA,GAGX,GADA7D,EAAEoG,MAAMC,IAAI,kBAAmBH,IAC1BA,EAAIb,QACR,MAAM,IAAIlB,MAAM,iBAAmB+B,EAAIrC,SAAW,qBAInD,OAFAqC,EAAIjE,OAASjC,EAAE2H,SAASzB,EAAIU,KAAMV,EAAIb,SACtCrF,EAAEoG,MAAMC,IAAI,iBAAkBH,GACvBhE,EAAMuF,UAAUzH,EAAE+B,KAAKC,OAAOkE,EAAIjE,QAASiE,EAAIrC,SACtD,EA0BD8D,SAAU,SAAU7L,EAAMuJ,GACzB,IAAIuC,EAAOvC,EAAQuC,KACnB,GAAIA,EAAM,CACT,IAAK,IAAIrC,KAASqC,EACjBvC,EAAQE,GAASqC,EAAKrC,UAGhBF,EAAQuC,IACf,CAED,IAAIC,EAAY,IAAIC,EAKpB,OAJAC,EAASF,EAAWA,EAAUG,KAAMlM,GAEpCmM,EAAanM,EAAM+L,EAAWxC,EAASwC,EAAUG,KAAM,GAEhDE,EAAQL,EACf,EAODzB,MAAO,CACN+B,IAAK,CAAC,EAcNnE,IAAK,SAAU7N,EAAMJ,GACpB,IAAIqQ,EAAQpG,EAAEoG,MAAM+B,IAEpB/B,EAAMjQ,GAAQiQ,EAAMjQ,IAAS,GAE7BiQ,EAAMjQ,GAAMmH,KAAKvH,EACjB,EAWDsQ,IAAK,SAAUlQ,EAAM+P,GACpB,IAAIkC,EAAYpI,EAAEoG,MAAM+B,IAAIhS,GAE5B,GAAKiS,GAAcA,EAAUjO,OAI7B,IAAK,IAAWpE,EAAP8I,EAAI,EAAc9I,EAAWqS,EAAUvJ,MAC/C9I,EAASmQ,EAEV,GAGFhE,MAAOA,GAqBR,SAASA,EAAM/J,EAAMrC,EAASqM,EAAOkG,GAUpCpT,KAAKkD,KAAOA,EASZlD,KAAKa,QAAUA,EAQfb,KAAKkN,MAAQA,EAEblN,KAAKkF,OAAqC,GAA3BkO,GAAc,IAAIlO,MACjC,CA6ED,SAASmO,EAAalH,EAASmH,EAAKzM,EAAMuF,GACzCD,EAAQoH,UAAYD,EACpB,IAAIrL,EAAQkE,EAAQoC,KAAK1H,GACzB,GAAIoB,GAASmE,GAAcnE,EAAM,GAAI,CAEpC,IAAIuL,EAAmBvL,EAAM,GAAG/C,OAChC+C,EAAM+C,OAASwI,EACfvL,EAAM,GAAKA,EAAM,GAAGZ,MAAMmM,EAC1B,CACD,OAAOvL,CACP,CAgBD,SAAS+K,EAAanM,EAAM+L,EAAWxC,EAASqD,EAAWC,EAAUC,GACpE,IAAK,IAAIrD,KAASF,EACjB,GAAKA,EAAQlC,eAAeoC,IAAWF,EAAQE,GAA/C,CAIA,IAAIsD,EAAWxD,EAAQE,GACvBsD,EAAWhJ,MAAMuC,QAAQyG,GAAYA,EAAW,CAACA,GAEjD,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAS1O,SAAU2O,EAAG,CACzC,GAAIF,GAAWA,EAAQG,OAASxD,EAAQ,IAAMuD,EAC7C,OAGD,IAAIE,EAAaH,EAASC,GACtBvH,EAASyH,EAAWzH,OACpBF,IAAe2H,EAAW3H,WAC1BC,IAAW0H,EAAW1H,OACtBa,EAAQ6G,EAAW7G,MAEvB,GAAIb,IAAW0H,EAAW5H,QAAQ6H,OAAQ,CAEzC,IAAIC,EAAQF,EAAW5H,QAAQqB,WAAWvF,MAAM,aAAa,GAC7D8L,EAAW5H,QAAU0C,OAAOkF,EAAW5H,QAAQ+H,OAAQD,EAAQ,IAC/D,CAKD,IAFA,IAAI9H,EAAU4H,EAAW5H,SAAW4H,EAG/BI,EAAcV,EAAUW,KAAMd,EAAMI,EACxCS,IAAgBvB,EAAUyB,KAC1Bf,GAAOa,EAAYvT,MAAMsE,OAAQiP,EAAcA,EAAYC,KAC1D,CAED,GAAIT,GAAWL,GAAOK,EAAQW,MAC7B,MAGD,IAAIC,EAAMJ,EAAYvT,MAEtB,GAAIgS,EAAU1N,OAAS2B,EAAK3B,OAE3B,OAGD,KAAIqP,aAAetH,GAAnB,CAIA,IACIhF,EADAuM,EAAc,EAGlB,GAAInI,EAAQ,CAEX,GADApE,EAAQoL,EAAalH,EAASmH,EAAKzM,EAAMuF,IACpCnE,GAASA,EAAM+C,OAASnE,EAAK3B,OACjC,MAGD,IAAI2F,EAAO5C,EAAM+C,MACbyJ,EAAKxM,EAAM+C,MAAQ/C,EAAM,GAAG/C,OAC5BwP,EAAIpB,EAGRoB,GAAKP,EAAYvT,MAAMsE,OACvB,MAAO2F,GAAQ6J,EACdP,EAAcA,EAAYC,KAC1BM,GAAKP,EAAYvT,MAAMsE,OAOxB,GAJAwP,GAAKP,EAAYvT,MAAMsE,OACvBoO,EAAMoB,EAGFP,EAAYvT,iBAAiBqM,EAChC,SAID,IACC,IAAI0H,EAAIR,EACRQ,IAAM/B,EAAUyB,OAASK,EAAID,GAAyB,kBAAZE,EAAE/T,OAC5C+T,EAAIA,EAAEP,KAENI,IACAE,GAAKC,EAAE/T,MAAMsE,OAEdsP,IAGAD,EAAM1N,EAAKQ,MAAMiM,EAAKoB,GACtBzM,EAAM+C,OAASsI,CACf,MAEA,GADArL,EAAQoL,EAAalH,EAAS,EAAGoI,EAAKnI,IACjCnE,EACJ,SAKE4C,EAAO5C,EAAM+C,MAAjB,IACI4J,EAAW3M,EAAM,GACjBgI,EAASsE,EAAIlN,MAAM,EAAGwD,GACtBgK,EAAQN,EAAIlN,MAAMwD,EAAO+J,EAAS1P,QAElCoP,EAAQhB,EAAMiB,EAAIrP,OAClByO,GAAWW,EAAQX,EAAQW,QAC9BX,EAAQW,MAAQA,GAGjB,IAAIQ,EAAaX,EAAYY,KAEzB9E,IACH6E,EAAahC,EAASF,EAAWkC,EAAY7E,GAC7CqD,GAAOrD,EAAO/K,QAGf8P,EAAYpC,EAAWkC,EAAYN,GAEnC,IAAIS,EAAU,IAAIhI,EAAMqD,EAAOhE,EAASvB,EAAE2H,SAASkC,EAAUtI,GAAUsI,EAAU1H,EAAO0H,GAOxF,GANAT,EAAcrB,EAASF,EAAWkC,EAAYG,GAE1CJ,GACH/B,EAASF,EAAWuB,EAAaU,GAG9BL,EAAc,EAAG,CAKpB,IAAIU,EAAgB,CACnBpB,MAAOxD,EAAQ,IAAMuD,EACrBS,MAAOA,GAERtB,EAAanM,EAAM+L,EAAWxC,EAAS+D,EAAYY,KAAMzB,EAAK4B,GAG1DvB,GAAWuB,EAAcZ,MAAQX,EAAQW,QAC5CX,EAAQW,MAAQY,EAAcZ,MAE/B,CA7FA,CA8FD,CACD,CA3IA,CA6IF,CAeD,SAASzB,IAER,IAAIE,EAAO,CAAEnS,MAAO,KAAMmU,KAAM,KAAMX,KAAM,MAExCC,EAAO,CAAEzT,MAAO,KAAMmU,KAAMhC,EAAMqB,KAAM,MAC5CrB,EAAKqB,KAAOC,EAGZrU,KAAK+S,KAAOA,EAEZ/S,KAAKqU,KAAOA,EACZrU,KAAKkF,OAAS,CACd,CAWD,SAAS4N,EAASqC,EAAMC,EAAMxU,GAE7B,IAAIwT,EAAOgB,EAAKhB,KAEZiB,EAAU,CAAEzU,MAAOA,EAAOmU,KAAMK,EAAMhB,KAAMA,GAKhD,OAJAgB,EAAKhB,KAAOiB,EACZjB,EAAKW,KAAOM,EACZF,EAAKjQ,SAEEmQ,CACP,CASD,SAASL,EAAYG,EAAMC,EAAM9N,GAEhC,IADA,IAAI8M,EAAOgB,EAAKhB,KACPxK,EAAI,EAAGA,EAAItC,GAAS8M,IAASe,EAAKd,KAAMzK,IAChDwK,EAAOA,EAAKA,KAEbgB,EAAKhB,KAAOA,EACZA,EAAKW,KAAOK,EACZD,EAAKjQ,QAAU0E,CACf,CAMD,SAASqJ,EAAQkC,GAChB,IAAIG,EAAQ,GACRF,EAAOD,EAAKpC,KAAKqB,KACrB,MAAOgB,IAASD,EAAKd,KACpBiB,EAAMjN,KAAK+M,EAAKxU,OAChBwU,EAAOA,EAAKhB,KAEb,OAAOkB,CACP,CAGD,GA3XApV,EAAM8L,MAAQjB,EA+EdkC,EAAMuF,UAAY,SAASA,EAAUnF,EAAGuB,GACvC,GAAgB,iBAALvB,EACV,OAAOA,EAER,GAAIzC,MAAMuC,QAAQE,GAAI,CACrB,IAAIkI,EAAI,GAIR,OAHAlI,EAAE/G,SAAQ,SAAUkC,GACnB+M,GAAK/C,EAAUhK,EAAGoG,EAClB,IACM2G,CACP,CAED,IAAItE,EAAM,CACT/N,KAAMmK,EAAEnK,KACRrC,QAAS2R,EAAUnF,EAAExM,QAAS+N,GAC9B4G,IAAK,OACLC,QAAS,CAAC,QAASpI,EAAEnK,MACrBwS,WAAY,CAAC,EACb9G,SAAUA,GAGP+G,EAAUtI,EAAEH,MACZyI,IACC/K,MAAMuC,QAAQwI,GACjB/K,MAAM2C,UAAUlF,KAAKiJ,MAAML,EAAIwE,QAASE,GAExC1E,EAAIwE,QAAQpN,KAAKsN,IAInB5K,EAAEoG,MAAMC,IAAI,OAAQH,GAEpB,IAAIyE,EAAa,GACjB,IAAK,IAAIxU,KAAQ+P,EAAIyE,WACpBA,GAAc,IAAMxU,EAAO,MAAQ+P,EAAIyE,WAAWxU,IAAS,IAAIkM,QAAQ,KAAM,UAAY,IAG1F,MAAO,IAAM6D,EAAIuE,IAAM,WAAavE,EAAIwE,QAAQ5L,KAAK,KAAO,IAAM6L,EAAa,IAAMzE,EAAIpQ,QAAU,KAAOoQ,EAAIuE,IAAM,GACpH,GAsQItV,EAAM+O,SACV,OAAK/O,EAAM0V,kBAKN7K,EAAE8B,6BAEN3M,EAAM0V,iBAAiB,WAAW,SAAUvD,GAC3C,IAAIwD,EAAUtD,KAAKuD,MAAMzD,EAAIrO,MACzByI,EAAOoJ,EAAQjH,SACf+C,EAAOkE,EAAQlE,KACfc,EAAiBoD,EAAQpD,eAE7BvS,EAAMoS,YAAYvH,EAAEvH,UAAUmO,EAAM5G,EAAEkB,UAAUQ,GAAOA,IACnDgG,GACHvS,EAAM6V,OAEP,IAAE,GAGGhL,GAlBCA,EAsBT,IAAIiL,EAASjL,EAAE+B,KAAKkC,gBAUpB,SAASiH,IACHlL,EAAE6B,QACN7B,EAAE8F,cAEH,CAED,GAdImF,IACHjL,EAAEoH,SAAW6D,EAAO5G,IAEhB4G,EAAOjE,aAAa,iBACvBhH,EAAE6B,QAAS,KAUR7B,EAAE6B,OAAQ,CAOd,IAAIsJ,EAAajH,SAASiH,WACP,YAAfA,GAA2C,gBAAfA,GAAgCF,GAAUA,EAAOG,MAChFlH,SAAS2G,iBAAiB,mBAAoBK,GAE1CxT,OAAO2T,sBACV3T,OAAO2T,sBAAsBH,GAE7BxT,OAAO4T,WAAWJ,EAAgC,GAGpD,CAED,OAAOlL,CAEP,CAlqCY,CAkqCX7K;;;;;;;;GAEmCoW,EAAOC,UAC3CD,EAAOC,QAAUvK,GAII,qBAAXgI,EAAAA,IACVA,EAAAA,EAAOhI,MAAQA,E,kBC5rChBA,MAAMC,UAAUuK,WAAaxK,MAAMC,UAAU6D,OAAO,QAAS,CAC5D,aAAc,CACb9D,MAAMC,UAAUC,MAAM,cACtB,CACCC,QAAS,0GACTC,YAAY,IAGd,QAAW,CACV,CACCD,QAAS,uBACTC,YAAY,GAEb,CACCD,QAAS,mdACTC,YAAY,IAId,SAAY,oGACZ,OAAU,CACTD,QAAS0C,OACR,aAAaqF,OACb,MAGC,eAAeA,OACf,IAEA,0BAA0BA,OAC1B,IAEA,4BAA4BA,OAC5B,IAEA,sCAAsCA,OACtC,IAEA,gBAAgBA,OAChB,IAEA,oFAAoFA,OAErF,IACA,YAAYA,QAEb9H,YAAY,GAEb,SAAY,8FAGbJ,MAAMC,UAAUuK,WAAW,cAAc,GAAGrK,QAAU,uEAEtDH,MAAMC,UAAU+D,aAAa,aAAc,UAAW,CACrD,MAAS,CACR7D,QAAS0C,OAGR,0DAA0DqF,OAK1D,KAAKA,OACL,MACA,iEAAiEA,OACjE,IAEA,qIAAqIA,OACrI,IAEA,kEAAkEA,QAEnE9H,YAAY,EACZC,QAAQ,EACRC,OAAQ,CACP,eAAgB,CACfH,QAAS,4BACTC,YAAY,EACZc,MAAO,iBACPZ,OAAQN,MAAMC,UAAUwK,OAEzB,kBAAmB,UACnB,cAAe,aAIjB,oBAAqB,CACpBtK,QAAS,gMACTe,MAAO,YAER,UAAa,CACZ,CACCf,QAAS,sIACTC,YAAY,EACZE,OAAQN,MAAMC,UAAUuK,YAEzB,CACCrK,QAAS,qFACTC,YAAY,EACZE,OAAQN,MAAMC,UAAUuK,YAEzB,CACCrK,QAAS,kEACTC,YAAY,EACZE,OAAQN,MAAMC,UAAUuK,YAEzB,CACCrK,QAAS,8eACTC,YAAY,EACZE,OAAQN,MAAMC,UAAUuK,aAG1B,SAAY,8BAGbxK,MAAMC,UAAU+D,aAAa,aAAc,SAAU,CACpD,SAAY,CACX7D,QAAS,QACTE,QAAQ,EACRa,MAAO,WAER,kBAAmB,CAClBf,QAAS,2EACTE,QAAQ,EACRC,OAAQ,CACP,uBAAwB,CACvBH,QAAS,QACTe,MAAO,UAER,cAAiB,CAChBf,QAAS,mEACTC,YAAY,EACZE,OAAQ,CACP,4BAA6B,CAC5BH,QAAS,YACTe,MAAO,eAERyF,KAAM3G,MAAMC,UAAUuK,aAGxB,OAAU,YAGZ,kBAAmB,CAClBrK,QAAS,4EACTC,YAAY,EACZC,QAAQ,EACRa,MAAO,cAITlB,MAAMC,UAAU+D,aAAa,aAAc,WAAY,CACtD,mBAAoB,CACnB7D,QAAS,oFACTC,YAAY,EACZc,MAAO,cAILlB,MAAMC,UAAUyK,SACnB1K,MAAMC,UAAUyK,OAAOlB,IAAImB,WAAW,SAAU,cAIhD3K,MAAMC,UAAUyK,OAAOlB,IAAIoB,aAC1B,yNAAyN1C,OACzN,eAIFlI,MAAMC,UAAU4K,GAAK7K,MAAMC,UAAUuK,U","sources":["webpack://chew.inte/./src/views/WriterView.vue","webpack://chew.inte/../src/Editor.ts","webpack://chew.inte/src/views/WriterView.vue","webpack://chew.inte/./src/views/WriterView.vue?0884","webpack://chew.inte/./src/views/WriterView.vue?431a","webpack://chew.inte/./node_modules/prismjs/components/prism-clike.js","webpack://chew.inte/./node_modules/prismjs/components/prism-core.js","webpack://chew.inte/./node_modules/prismjs/components/prism-javascript.js"],"sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"container mx-auto my-5 p-5\"},[(!_vm.result)?_c('div',[(_vm.codeMode)?_c('div',[_c('prism-editor',{staticClass:\"code-editor\",attrs:{\"highlight\":_vm.highlighter,\"line-numbers\":\"\"},model:{value:(_vm.content),callback:function ($$v) {_vm.content=$$v},expression:\"content\"}})],1):_c('div',[_c('textarea',{directives:[{name:\"model\",rawName:\"v-model\",value:(_vm.content),expression:\"content\"}],staticClass:\"form-control block w-full px-3 py-1.5 text-base font-normal text-gray-700 bg-white bg-clip-padding border border-solid border-gray-300 rounded transition ease-in-out m-0 focus:text-gray-700 focus:bg-white focus:border-blue-600 focus:outline-none\",domProps:{\"value\":(_vm.content)},on:{\"input\":function($event){if($event.target.composing)return;_vm.content=$event.target.value}}})]),_c('button',{staticClass:\"w-full mt-3 flex items-center justify-center px-8 py-3 border border-transparent text-base font-medium rounded-md text-violet-700 bg-violet-100 hover:bg-violet-200 md:py-4 md:text-lg md:px-10\",on:{\"click\":_vm.handleSubmit}},[_vm._v(\" 我打完了 \")])]):_c('div',[_c('div',{staticClass:\"w-64 mx-auto\"},[_c('h4',{staticClass:\"font-semibold text-slate-900\"},[_vm._v(\"片段代碼：\")]),_c('span',{staticClass:\"rounded-full bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700\"},[_vm._v(\" \"+_vm._s(_vm.result._id)+\" \")])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import Vue, { VNode } from 'vue';\n\nimport './styles.css';\nconst KEYCODE_ENTER = 13;\nconst KEYCODE_TAB = 9;\nconst KEYCODE_BACKSPACE = 8;\nconst KEYCODE_Y = 89;\nconst KEYCODE_Z = 90;\nconst KEYCODE_M = 77;\nconst KEYCODE_PARENS = 57;\nconst KEYCODE_BRACKETS = 219;\nconst KEYCODE_QUOTE = 222;\nconst KEYCODE_BACK_QUOTE = 192;\nconst KEYCODE_ESCAPE = 27;\n\nconst HISTORY_LIMIT = 100;\nconst HISTORY_TIME_GAP = 3000;\n\nconst isWindows = typeof window !== 'undefined' && navigator && /Win/i.test(navigator.platform);\nconst isMacLike = typeof window !== 'undefined' && navigator && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform);\n\nexport interface EditorProps {\n  lineNumbers: boolean;\n  autoStyleLineNumbers: boolean;\n  readonly: boolean;\n  value: string;\n  highlight: () => string;\n  tabSize: number;\n  insertSpaces: boolean;\n  ignoreTabKey: boolean;\n  placeholder: string;\n}\nexport interface Record {\n  value: string;\n  selectionStart: number;\n  selectionEnd: number;\n}\n\nexport interface History {\n  stack: Array<Record & { timestamp: number }>;\n  offset: number;\n}\n\nexport const PrismEditor = Vue.extend({\n  props: {\n    lineNumbers: {\n      type: Boolean,\n      default: false,\n    },\n    autoStyleLineNumbers: {\n      type: Boolean,\n      default: true,\n    },\n    readonly: {\n      type: Boolean,\n      default: false,\n    },\n    value: {\n      type: String,\n      default: '',\n    },\n    highlight: {\n      type: Function,\n      required: true,\n    },\n    tabSize: {\n      type: Number,\n      default: 2,\n    },\n    insertSpaces: {\n      type: Boolean,\n      default: true,\n    },\n    ignoreTabKey: {\n      type: Boolean,\n      default: false,\n    },\n    placeholder: {\n      type: String,\n      default: '',\n    },\n  },\n  data() {\n    return {\n      capture: true,\n      history: {\n        stack: [],\n        offset: -1,\n      } as History,\n      lineNumbersHeight: '20px',\n      codeData: '',\n    };\n  },\n  watch: {\n    value: {\n      immediate: true,\n      handler(newVal: string): void {\n        if (!newVal) {\n          this.codeData = '';\n        } else {\n          this.codeData = newVal;\n        }\n      },\n    },\n    content: {\n      immediate: true,\n      handler(): void {\n        if (this.lineNumbers) {\n          this.$nextTick(() => {\n            this.setLineNumbersHeight();\n          });\n        }\n      },\n    },\n    lineNumbers(): void {\n      this.$nextTick(() => {\n        this.styleLineNumbers();\n        this.setLineNumbersHeight();\n      });\n    },\n  },\n  computed: {\n    isEmpty(): boolean {\n      return this.codeData.length === 0;\n    },\n    content(): string {\n      const result = this.highlight(this.codeData) + '<br />';\n      // todo: VNode support?\n      return result;\n    },\n    lineNumbersCount(): number {\n      const totalLines = this.codeData.split(/\\r\\n|\\n/).length;\n      return totalLines;\n    },\n  },\n  mounted() {\n    this._recordCurrentState();\n    this.styleLineNumbers();\n  },\n\n  methods: {\n    setLineNumbersHeight(): void {\n      this.lineNumbersHeight = getComputedStyle(this.$refs.pre as HTMLTextAreaElement).height;\n    },\n    styleLineNumbers(): void {\n      if (!this.lineNumbers || !this.autoStyleLineNumbers) return;\n\n      const $editor = this.$refs.pre as HTMLTextAreaElement;\n      const $lineNumbers: HTMLDivElement | null = this.$el.querySelector('.prism-editor__line-numbers');\n      const editorStyles = window.getComputedStyle($editor);\n\n      this.$nextTick(() => {\n        const btlr: any = 'border-top-left-radius';\n        const bblr: any = 'border-bottom-left-radius';\n        if (!$lineNumbers) return;\n        $lineNumbers.style[btlr] = editorStyles[btlr];\n        $lineNumbers.style[bblr] = editorStyles[bblr];\n        $editor.style[btlr] = '0';\n        $editor.style[bblr] = '0';\n\n        const stylesList = ['background-color', 'margin-top', 'padding-top', 'font-family', 'font-size', 'line-height'];\n        stylesList.forEach((style: any) => {\n          $lineNumbers.style[style] = editorStyles[style];\n        });\n        $lineNumbers.style['margin-bottom' as any] = '-' + editorStyles['padding-top' as any];\n      });\n    },\n    _recordCurrentState(): void {\n      const input = this.$refs.textarea as HTMLTextAreaElement;\n\n      if (!input) return;\n      // Save current state of the input\n      const { value, selectionStart, selectionEnd } = input;\n\n      this._recordChange({\n        value,\n        selectionStart,\n        selectionEnd,\n      });\n    },\n    _getLines(text: string, position: number): Array<string> {\n      return text.substring(0, position).split('\\n');\n    },\n    _applyEdits(record: Record): void {\n      // Save last selection state\n      const input = this.$refs.textarea as HTMLTextAreaElement;\n      const last = this.history.stack[this.history.offset];\n\n      if (last && input) {\n        this.history.stack[this.history.offset] = {\n          ...last,\n          selectionStart: input.selectionStart,\n          selectionEnd: input.selectionEnd,\n        };\n      }\n\n      // Save the changes\n      this._recordChange(record);\n      this._updateInput(record);\n    },\n    _recordChange(record: Record, overwrite = false): void {\n      const { stack, offset } = this.history;\n\n      if (stack.length && offset > -1) {\n        // When something updates, drop the redo operations\n        this.history.stack = stack.slice(0, offset + 1);\n\n        // Limit the number of operations to 100\n        const count = this.history.stack.length;\n\n        if (count > HISTORY_LIMIT) {\n          const extras = count - HISTORY_LIMIT;\n\n          this.history.stack = stack.slice(extras, count);\n          this.history.offset = Math.max(this.history.offset - extras, 0);\n        }\n      }\n\n      const timestamp = Date.now();\n\n      if (overwrite) {\n        const last = this.history.stack[this.history.offset];\n\n        if (last && timestamp - last.timestamp < HISTORY_TIME_GAP) {\n          // A previous entry exists and was in short interval\n\n          // Match the last word in the line\n          const re = /[^a-z0-9]([a-z0-9]+)$/i;\n\n          // Get the previous line\n          const previous = this._getLines(last.value, last.selectionStart).pop()?.match(re);\n\n          // Get the current line\n          const current = this._getLines(record.value, record.selectionStart).pop()?.match(re);\n\n          if (previous && current && current[1].startsWith(previous[1])) {\n            // The last word of the previous line and current line match\n            // Overwrite previous entry so that undo will remove whole word\n            this.history.stack[this.history.offset] = {\n              ...record,\n              timestamp,\n            };\n\n            return;\n          }\n        }\n      }\n\n      // Add the new operation to the stack\n      this.history.stack.push({ ...record, timestamp });\n      this.history.offset++;\n    },\n\n    _updateInput(record: Record): void {\n      const input = this.$refs.textarea as HTMLTextAreaElement;\n\n      if (!input) return;\n\n      // Update values and selection state\n      input.value = record.value;\n      input.selectionStart = record.selectionStart;\n      input.selectionEnd = record.selectionEnd;\n\n      this.$emit('input', record.value);\n      // this.props.onValueChange(record.value);\n    },\n    handleChange(e: KeyboardEvent): void {\n      const { value, selectionStart, selectionEnd } = e.target as HTMLTextAreaElement;\n\n      this._recordChange(\n        {\n          value,\n          selectionStart,\n          selectionEnd,\n        },\n        true\n      );\n      this.$emit('input', value);\n      // this.props.onValueChange(value);\n    },\n    _undoEdit(): void {\n      const { stack, offset } = this.history;\n\n      // Get the previous edit\n      const record = stack[offset - 1];\n\n      if (record) {\n        // Apply the changes and update the offset\n        this._updateInput(record);\n        this.history.offset = Math.max(offset - 1, 0);\n      }\n    },\n    _redoEdit(): void {\n      const { stack, offset } = this.history;\n\n      // Get the next edit\n      const record = stack[offset + 1];\n\n      if (record) {\n        // Apply the changes and update the offset\n        this._updateInput(record);\n        this.history.offset = Math.min(offset + 1, stack.length - 1);\n      }\n    },\n    handleKeyDown(e: KeyboardEvent): void {\n      // console.log(navigator.platform);\n      const { tabSize, insertSpaces, ignoreTabKey } = this;\n\n      if (this.$listeners.keydown) {\n        // onKeyDown(e);\n        this.$emit('keydown', e);\n\n        if (e.defaultPrevented) {\n          return;\n        }\n      }\n\n      if (e.keyCode === KEYCODE_ESCAPE) {\n        (<HTMLTextAreaElement>e.target).blur();\n        this.$emit('blur', e);\n      }\n\n      const { value, selectionStart, selectionEnd } = e.target as HTMLTextAreaElement;\n\n      const tabCharacter = (insertSpaces ? ' ' : '\\t').repeat(tabSize);\n\n      if (e.keyCode === KEYCODE_TAB && !ignoreTabKey && this.capture) {\n        // Prevent focus change\n        e.preventDefault();\n\n        if (e.shiftKey) {\n          // Unindent selected lines\n          const linesBeforeCaret = this._getLines(value, selectionStart);\n          const startLine = linesBeforeCaret.length - 1;\n          const endLine = this._getLines(value, selectionEnd).length - 1;\n          const nextValue = value\n            .split('\\n')\n            .map((line, i) => {\n              if (i >= startLine && i <= endLine && line.startsWith(tabCharacter)) {\n                return line.substring(tabCharacter.length);\n              }\n\n              return line;\n            })\n            .join('\\n');\n\n          if (value !== nextValue) {\n            const startLineText = linesBeforeCaret[startLine];\n\n            this._applyEdits({\n              value: nextValue,\n              // Move the start cursor if first line in selection was modified\n              // It was modified only if it started with a tab\n              selectionStart: startLineText.startsWith(tabCharacter)\n                ? selectionStart - tabCharacter.length\n                : selectionStart,\n              // Move the end cursor by total number of characters removed\n              selectionEnd: selectionEnd - (value.length - nextValue.length),\n            });\n          }\n        } else if (selectionStart !== selectionEnd) {\n          // Indent selected lines\n          const linesBeforeCaret = this._getLines(value, selectionStart);\n          const startLine = linesBeforeCaret.length - 1;\n          const endLine = this._getLines(value, selectionEnd).length - 1;\n          const startLineText = linesBeforeCaret[startLine];\n\n          this._applyEdits({\n            value: value\n              .split('\\n')\n              .map((line, i) => {\n                if (i >= startLine && i <= endLine) {\n                  return tabCharacter + line;\n                }\n\n                return line;\n              })\n              .join('\\n'),\n            // Move the start cursor by number of characters added in first line of selection\n            // Don't move it if it there was no text before cursor\n            selectionStart: /\\S/.test(startLineText) ? selectionStart + tabCharacter.length : selectionStart,\n            // Move the end cursor by total number of characters added\n            selectionEnd: selectionEnd + tabCharacter.length * (endLine - startLine + 1),\n          });\n        } else {\n          const updatedSelection = selectionStart + tabCharacter.length;\n\n          this._applyEdits({\n            // Insert tab character at caret\n            value: value.substring(0, selectionStart) + tabCharacter + value.substring(selectionEnd),\n            // Update caret position\n            selectionStart: updatedSelection,\n            selectionEnd: updatedSelection,\n          });\n        }\n      } else if (e.keyCode === KEYCODE_BACKSPACE) {\n        const hasSelection = selectionStart !== selectionEnd;\n        const textBeforeCaret = value.substring(0, selectionStart);\n\n        if (textBeforeCaret.endsWith(tabCharacter) && !hasSelection) {\n          // Prevent default delete behaviour\n          e.preventDefault();\n\n          const updatedSelection = selectionStart - tabCharacter.length;\n\n          this._applyEdits({\n            // Remove tab character at caret\n            value: value.substring(0, selectionStart - tabCharacter.length) + value.substring(selectionEnd),\n            // Update caret position\n            selectionStart: updatedSelection,\n            selectionEnd: updatedSelection,\n          });\n        }\n      } else if (e.keyCode === KEYCODE_ENTER) {\n        // Ignore selections\n        if (selectionStart === selectionEnd) {\n          // Get the current line\n          const line = this._getLines(value, selectionStart).pop();\n          const matches = line?.match(/^\\s+/);\n\n          if (matches && matches[0]) {\n            e.preventDefault();\n\n            // Preserve indentation on inserting a new line\n            const indent = '\\n' + matches[0];\n            const updatedSelection = selectionStart + indent.length;\n\n            this._applyEdits({\n              // Insert indentation character at caret\n              value: value.substring(0, selectionStart) + indent + value.substring(selectionEnd),\n              // Update caret position\n              selectionStart: updatedSelection,\n              selectionEnd: updatedSelection,\n            });\n          }\n        }\n      } else if (\n        e.keyCode === KEYCODE_PARENS ||\n        e.keyCode === KEYCODE_BRACKETS ||\n        e.keyCode === KEYCODE_QUOTE ||\n        e.keyCode === KEYCODE_BACK_QUOTE\n      ) {\n        let chars;\n\n        if (e.keyCode === KEYCODE_PARENS && e.shiftKey) {\n          chars = ['(', ')'];\n        } else if (e.keyCode === KEYCODE_BRACKETS) {\n          if (e.shiftKey) {\n            chars = ['{', '}'];\n          } else {\n            chars = ['[', ']'];\n          }\n        } else if (e.keyCode === KEYCODE_QUOTE) {\n          if (e.shiftKey) {\n            chars = ['\"', '\"'];\n          } else {\n            chars = [\"'\", \"'\"];\n          }\n        } else if (e.keyCode === KEYCODE_BACK_QUOTE && !e.shiftKey) {\n          chars = ['`', '`'];\n        }\n\n        // console.log(isMacLike, \"navigator\" in global && /(Mac|iPhone|iPod|iPad)/i.test(navigator.platform));\n\n        // If text is selected, wrap them in the characters\n        if (selectionStart !== selectionEnd && chars) {\n          e.preventDefault();\n\n          this._applyEdits({\n            value:\n              value.substring(0, selectionStart) +\n              chars[0] +\n              value.substring(selectionStart, selectionEnd) +\n              chars[1] +\n              value.substring(selectionEnd),\n            // Update caret position\n            selectionStart,\n            selectionEnd: selectionEnd + 2,\n          });\n        }\n      } else if (\n        (isMacLike\n          ? // Trigger undo with ⌘+Z on Mac\n            e.metaKey && e.keyCode === KEYCODE_Z\n          : // Trigger undo with Ctrl+Z on other platforms\n            e.ctrlKey && e.keyCode === KEYCODE_Z) &&\n        !e.shiftKey &&\n        !e.altKey\n      ) {\n        e.preventDefault();\n\n        this._undoEdit();\n      } else if (\n        (isMacLike\n          ? // Trigger redo with ⌘+Shift+Z on Mac\n            e.metaKey && e.keyCode === KEYCODE_Z && e.shiftKey\n          : isWindows\n          ? // Trigger redo with Ctrl+Y on Windows\n            e.ctrlKey && e.keyCode === KEYCODE_Y\n          : // Trigger redo with Ctrl+Shift+Z on other platforms\n            e.ctrlKey && e.keyCode === KEYCODE_Z && e.shiftKey) &&\n        !e.altKey\n      ) {\n        e.preventDefault();\n\n        this._redoEdit();\n      } else if (e.keyCode === KEYCODE_M && e.ctrlKey && (isMacLike ? e.shiftKey : true)) {\n        e.preventDefault();\n\n        // Toggle capturing tab key so users can focus away\n        this.capture = !this.capture;\n      }\n    },\n  },\n  render(h): VNode {\n    const lineNumberWidthCalculator = h(\n      'div',\n      {\n        attrs: {\n          class: 'prism-editor__line-width-calc',\n          style: 'height: 0px; visibility: hidden; pointer-events: none;',\n        },\n      },\n      '999'\n    );\n    const lineNumbers = h(\n      'div',\n      {\n        staticClass: 'prism-editor__line-numbers',\n        style: {\n          'min-height': this.lineNumbersHeight,\n        },\n        attrs: {\n          'aria-hidden': 'true',\n        },\n      },\n      [\n        lineNumberWidthCalculator,\n        Array.from(Array(this.lineNumbersCount).keys()).map((_, index) => {\n          return h('div', { attrs: { class: 'prism-editor__line-number token comment' } }, `${++index}`);\n        }),\n      ]\n    );\n\n    const textarea = h('textarea', {\n      ref: 'textarea',\n      on: {\n        input: this.handleChange,\n        keydown: this.handleKeyDown,\n        click: ($event: MouseEvent) => {\n          this.$emit('click', $event);\n        },\n        keyup: ($event: KeyboardEvent) => {\n          this.$emit('keyup', $event);\n        },\n        focus: ($event: FocusEvent) => {\n          this.$emit('focus', $event);\n        },\n        blur: ($event: FocusEvent) => {\n          this.$emit('blur', $event);\n        },\n      },\n      staticClass: 'prism-editor__textarea',\n      class: {\n        'prism-editor__textarea--empty': this.isEmpty,\n      },\n      attrs: {\n        spellCheck: 'false',\n        autocapitalize: 'off',\n        autocomplete: 'off',\n        autocorrect: 'off',\n        'data-gramm': 'false',\n        placeholder: this.placeholder,\n        'data-testid': 'textarea',\n        readonly: this.readonly,\n      },\n      domProps: {\n        value: this.codeData,\n      },\n    });\n    const preview = h('pre', {\n      ref: 'pre',\n      staticClass: 'prism-editor__editor',\n      attrs: {\n        'data-testid': 'preview',\n      },\n      domProps: {\n        innerHTML: this.content,\n      },\n    });\n    const editorContainer = h('div', { staticClass: 'prism-editor__container' }, [textarea, preview]);\n    return h('div', { staticClass: 'prism-editor-wrapper' }, [this.lineNumbers && lineNumbers, editorContainer]);\n  },\n});\n","<template>\n  <div class=\"container mx-auto my-5 p-5\">\n    <div v-if=\"!result\">\n      <div v-if=\"codeMode\">\n        <prism-editor\n          class=\"code-editor\"\n          v-model=\"content\"\n          :highlight=\"highlighter\"\n          line-numbers\n        ></prism-editor>\n      </div>\n      <div v-else>\n        <textarea\n          class=\"\n            form-control\n            block\n            w-full\n            px-3\n            py-1.5\n            text-base\n            font-normal\n            text-gray-700\n            bg-white bg-clip-padding\n            border border-solid border-gray-300\n            rounded\n            transition\n            ease-in-out\n            m-0\n            focus:text-gray-700\n            focus:bg-white\n            focus:border-blue-600\n            focus:outline-none\n          \"\n          v-model=\"content\"\n        ></textarea>\n      </div>\n      <button\n        class=\"\n          w-full\n          mt-3\n          flex\n          items-center\n          justify-center\n          px-8\n          py-3\n          border border-transparent\n          text-base\n          font-medium\n          rounded-md\n          text-violet-700\n          bg-violet-100\n          hover:bg-violet-200\n          md:py-4 md:text-lg md:px-10\n        \"\n        @click=\"handleSubmit\"\n      >\n        我打完了\n      </button>\n    </div>\n    <div v-else>\n      <div class=\"w-64 mx-auto\">\n        <h4 class=\"font-semibold text-slate-900\">片段代碼：</h4>\n        <span\n          class=\"\n            rounded-full\n            bg-slate-100\n            px-2\n            py-1\n            text-xs\n            font-semibold\n            text-slate-700\n          \"\n        >\n          {{ result._id }}\n        </span>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n// import Prism Editor\nimport { PrismEditor } from \"vue-prism-editor\";\nimport \"vue-prism-editor/dist/prismeditor.min.css\"; // import the styles somewhere\n\n// import highlighting library (you can use any library you want just return html string)\nimport { highlight, languages } from \"prismjs/components/prism-core\";\nimport \"prismjs/components/prism-clike\";\nimport \"prismjs/components/prism-javascript\";\nimport \"prismjs/themes/prism-tomorrow.css\"; // import syntax highlighting styles\n\nexport default {\n  name: \"WriterView\",\n  components: {\n    PrismEditor,\n  },\n  data: () => ({\n    codeMode: true,\n    content: \"\",\n    result: \"\",\n  }),\n  methods: {\n    highlighter(code) {\n      return highlight(code, languages.js); // languages.<insert language> to return html with markup\n    },\n    async handleSubmit() {\n      const form = new URLSearchParams();\n      form.append(\"content\", this.content);\n      const xhr = await this.$axios.post(\"/anonymous\", form);\n      this.result = xhr.data;\n    },\n  },\n};\n</script>\n\n<style>\n/* required class */\n.code-editor {\n  /* we dont use `language-` classes anymore so thats why we need to add background and text color manually */\n  background: #2d2d2d;\n  color: #ccc;\n\n  /* you must provide font-family font-size line-height. Example: */\n  font-family: Fira code, Fira Mono, Consolas, Menlo, Courier, monospace;\n  font-size: 14px;\n  line-height: 1.5;\n  padding: 5px;\n}\n\n/* optional class for removing the outline */\n.prism-editor__textarea:focus {\n  outline: none;\n}\n</style>\n\n","import mod from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./WriterView.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[1]!../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./WriterView.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./WriterView.vue?vue&type=template&id=7b3045e5&\"\nimport script from \"./WriterView.vue?vue&type=script&lang=js&\"\nexport * from \"./WriterView.vue?vue&type=script&lang=js&\"\nimport style0 from \"./WriterView.vue?vue&type=style&index=0&id=7b3045e5&prod&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports","Prism.languages.clike = {\n\t'comment': [\n\t\t{\n\t\t\tpattern: /(^|[^\\\\])\\/\\*[\\s\\S]*?(?:\\*\\/|$)/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^\\\\:])\\/\\/.*/,\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true\n\t\t}\n\t],\n\t'string': {\n\t\tpattern: /([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\tgreedy: true\n\t},\n\t'class-name': {\n\t\tpattern: /(\\b(?:class|extends|implements|instanceof|interface|new|trait)\\s+|\\bcatch\\s+\\()[\\w.\\\\]+/i,\n\t\tlookbehind: true,\n\t\tinside: {\n\t\t\t'punctuation': /[.\\\\]/\n\t\t}\n\t},\n\t'keyword': /\\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\\b/,\n\t'boolean': /\\b(?:false|true)\\b/,\n\t'function': /\\b\\w+(?=\\()/,\n\t'number': /\\b0x[\\da-f]+\\b|(?:\\b\\d+(?:\\.\\d*)?|\\B\\.\\d+)(?:e[+-]?\\d+)?/i,\n\t'operator': /[<>]=?|[!=]=?=?|--?|\\+\\+?|&&?|\\|\\|?|[?*/~^%]/,\n\t'punctuation': /[{}[\\];(),.:]/\n};\n","/// <reference lib=\"WebWorker\"/>\n\nvar _self = (typeof window !== 'undefined')\n\t? window   // if in browser\n\t: (\n\t\t(typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope)\n\t\t\t? self // if in worker\n\t\t\t: {}   // if in node js\n\t);\n\n/**\n * Prism: Lightweight, robust, elegant syntax highlighting\n *\n * @license MIT <https://opensource.org/licenses/MIT>\n * @author Lea Verou <https://lea.verou.me>\n * @namespace\n * @public\n */\nvar Prism = (function (_self) {\n\n\t// Private helper vars\n\tvar lang = /(?:^|\\s)lang(?:uage)?-([\\w-]+)(?=\\s|$)/i;\n\tvar uniqueId = 0;\n\n\t// The grammar object for plaintext\n\tvar plainTextGrammar = {};\n\n\n\tvar _ = {\n\t\t/**\n\t\t * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the\n\t\t * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load\n\t\t * additional languages or plugins yourself.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.\n\t\t *\n\t\t * You obviously have to change this value before the automatic highlighting started. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.manual = true;\n\t\t * // add a new <script> to load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tmanual: _self.Prism && _self.Prism.manual,\n\t\t/**\n\t\t * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses\n\t\t * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your\n\t\t * own worker, you don't want it to do this.\n\t\t *\n\t\t * By setting this value to `true`, Prism will not add its own listeners to the worker.\n\t\t *\n\t\t * You obviously have to change this value before Prism executes. To do this, you can add an\n\t\t * empty Prism object into the global scope before loading the Prism script like this:\n\t\t *\n\t\t * ```js\n\t\t * window.Prism = window.Prism || {};\n\t\t * Prism.disableWorkerMessageHandler = true;\n\t\t * // Load Prism's script\n\t\t * ```\n\t\t *\n\t\t * @default false\n\t\t * @type {boolean}\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tdisableWorkerMessageHandler: _self.Prism && _self.Prism.disableWorkerMessageHandler,\n\n\t\t/**\n\t\t * A namespace for utility methods.\n\t\t *\n\t\t * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may\n\t\t * change or disappear at any time.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t */\n\t\tutil: {\n\t\t\tencode: function encode(tokens) {\n\t\t\t\tif (tokens instanceof Token) {\n\t\t\t\t\treturn new Token(tokens.type, encode(tokens.content), tokens.alias);\n\t\t\t\t} else if (Array.isArray(tokens)) {\n\t\t\t\t\treturn tokens.map(encode);\n\t\t\t\t} else {\n\t\t\t\t\treturn tokens.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/\\u00a0/g, ' ');\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the name of the type of the given value.\n\t\t\t *\n\t\t\t * @param {any} o\n\t\t\t * @returns {string}\n\t\t\t * @example\n\t\t\t * type(null)      === 'Null'\n\t\t\t * type(undefined) === 'Undefined'\n\t\t\t * type(123)       === 'Number'\n\t\t\t * type('foo')     === 'String'\n\t\t\t * type(true)      === 'Boolean'\n\t\t\t * type([1, 2])    === 'Array'\n\t\t\t * type({})        === 'Object'\n\t\t\t * type(String)    === 'Function'\n\t\t\t * type(/abc+/)    === 'RegExp'\n\t\t\t */\n\t\t\ttype: function (o) {\n\t\t\t\treturn Object.prototype.toString.call(o).slice(8, -1);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns a unique number for the given object. Later calls will still return the same number.\n\t\t\t *\n\t\t\t * @param {Object} obj\n\t\t\t * @returns {number}\n\t\t\t */\n\t\t\tobjId: function (obj) {\n\t\t\t\tif (!obj['__id']) {\n\t\t\t\t\tObject.defineProperty(obj, '__id', { value: ++uniqueId });\n\t\t\t\t}\n\t\t\t\treturn obj['__id'];\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Creates a deep clone of the given object.\n\t\t\t *\n\t\t\t * The main intended use of this function is to clone language definitions.\n\t\t\t *\n\t\t\t * @param {T} o\n\t\t\t * @param {Record<number, any>} [visited]\n\t\t\t * @returns {T}\n\t\t\t * @template T\n\t\t\t */\n\t\t\tclone: function deepClone(o, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar clone; var id;\n\t\t\t\tswitch (_.util.type(o)) {\n\t\t\t\t\tcase 'Object':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = /** @type {Record<string, any>} */ ({});\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\tfor (var key in o) {\n\t\t\t\t\t\t\tif (o.hasOwnProperty(key)) {\n\t\t\t\t\t\t\t\tclone[key] = deepClone(o[key], visited);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tcase 'Array':\n\t\t\t\t\t\tid = _.util.objId(o);\n\t\t\t\t\t\tif (visited[id]) {\n\t\t\t\t\t\t\treturn visited[id];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tclone = [];\n\t\t\t\t\t\tvisited[id] = clone;\n\n\t\t\t\t\t\t(/** @type {Array} */(/** @type {any} */(o))).forEach(function (v, i) {\n\t\t\t\t\t\t\tclone[i] = deepClone(v, visited);\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn /** @type {any} */ (clone);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\treturn o;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.\n\t\t\t *\n\t\t\t * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @returns {string}\n\t\t\t */\n\t\t\tgetLanguage: function (element) {\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar m = lang.exec(element.className);\n\t\t\t\t\tif (m) {\n\t\t\t\t\t\treturn m[1].toLowerCase();\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn 'none';\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Sets the Prism `language-xxxx` class of the given element.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} language\n\t\t\t * @returns {void}\n\t\t\t */\n\t\t\tsetLanguage: function (element, language) {\n\t\t\t\t// remove all `language-xxxx` classes\n\t\t\t\t// (this might leave behind a leading space)\n\t\t\t\telement.className = element.className.replace(RegExp(lang, 'gi'), '');\n\n\t\t\t\t// add the new `language-xxxx` class\n\t\t\t\t// (using `classList` will automatically clean up spaces for us)\n\t\t\t\telement.classList.add('language-' + language);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns the script element that is currently executing.\n\t\t\t *\n\t\t\t * This does __not__ work for line script element.\n\t\t\t *\n\t\t\t * @returns {HTMLScriptElement | null}\n\t\t\t */\n\t\t\tcurrentScript: function () {\n\t\t\t\tif (typeof document === 'undefined') {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t\tif ('currentScript' in document && 1 < 2 /* hack to trip TS' flow analysis */) {\n\t\t\t\t\treturn /** @type {any} */ (document.currentScript);\n\t\t\t\t}\n\n\t\t\t\t// IE11 workaround\n\t\t\t\t// we'll get the src of the current script by parsing IE11's error stack trace\n\t\t\t\t// this will not work for inline scripts\n\n\t\t\t\ttry {\n\t\t\t\t\tthrow new Error();\n\t\t\t\t} catch (err) {\n\t\t\t\t\t// Get file src url from stack. Specifically works with the format of stack traces in IE.\n\t\t\t\t\t// A stack will look like this:\n\t\t\t\t\t//\n\t\t\t\t\t// Error\n\t\t\t\t\t//    at _.util.currentScript (http://localhost/components/prism-core.js:119:5)\n\t\t\t\t\t//    at Global code (http://localhost/components/prism-core.js:606:1)\n\n\t\t\t\t\tvar src = (/at [^(\\r\\n]*\\((.*):[^:]+:[^:]+\\)$/i.exec(err.stack) || [])[1];\n\t\t\t\t\tif (src) {\n\t\t\t\t\t\tvar scripts = document.getElementsByTagName('script');\n\t\t\t\t\t\tfor (var i in scripts) {\n\t\t\t\t\t\t\tif (scripts[i].src == src) {\n\t\t\t\t\t\t\t\treturn scripts[i];\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Returns whether a given class is active for `element`.\n\t\t\t *\n\t\t\t * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated\n\t\t\t * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the\n\t\t\t * given class is just the given class with a `no-` prefix.\n\t\t\t *\n\t\t\t * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is\n\t\t\t * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its\n\t\t\t * ancestors have the given class or the negated version of it, then the default activation will be returned.\n\t\t\t *\n\t\t\t * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated\n\t\t\t * version of it, the class is considered active.\n\t\t\t *\n\t\t\t * @param {Element} element\n\t\t\t * @param {string} className\n\t\t\t * @param {boolean} [defaultActivation=false]\n\t\t\t * @returns {boolean}\n\t\t\t */\n\t\t\tisActive: function (element, className, defaultActivation) {\n\t\t\t\tvar no = 'no-' + className;\n\n\t\t\t\twhile (element) {\n\t\t\t\t\tvar classList = element.classList;\n\t\t\t\t\tif (classList.contains(className)) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tif (classList.contains(no)) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\telement = element.parentElement;\n\t\t\t\t}\n\t\t\t\treturn !!defaultActivation;\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.\n\t\t *\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\tlanguages: {\n\t\t\t/**\n\t\t\t * The grammar for plain, unformatted text.\n\t\t\t */\n\t\t\tplain: plainTextGrammar,\n\t\t\tplaintext: plainTextGrammar,\n\t\t\ttext: plainTextGrammar,\n\t\t\ttxt: plainTextGrammar,\n\n\t\t\t/**\n\t\t\t * Creates a deep copy of the language with the given id and appends the given tokens.\n\t\t\t *\n\t\t\t * If a token in `redef` also appears in the copied language, then the existing token in the copied language\n\t\t\t * will be overwritten at its original position.\n\t\t\t *\n\t\t\t * ## Best practices\n\t\t\t *\n\t\t\t * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)\n\t\t\t * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to\n\t\t\t * understand the language definition because, normally, the order of tokens matters in Prism grammars.\n\t\t\t *\n\t\t\t * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.\n\t\t\t * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.\n\t\t\t *\n\t\t\t * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.\n\t\t\t * @param {Grammar} redef The new tokens to append.\n\t\t\t * @returns {Grammar} The new language created.\n\t\t\t * @public\n\t\t\t * @example\n\t\t\t * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {\n\t\t\t *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token\n\t\t\t *     // at its original position\n\t\t\t *     'comment': { ... },\n\t\t\t *     // CSS doesn't have a 'color' token, so this token will be appended\n\t\t\t *     'color': /\\b(?:red|green|blue)\\b/\n\t\t\t * });\n\t\t\t */\n\t\t\textend: function (id, redef) {\n\t\t\t\tvar lang = _.util.clone(_.languages[id]);\n\n\t\t\t\tfor (var key in redef) {\n\t\t\t\t\tlang[key] = redef[key];\n\t\t\t\t}\n\n\t\t\t\treturn lang;\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Inserts tokens _before_ another token in a language definition or any other grammar.\n\t\t\t *\n\t\t\t * ## Usage\n\t\t\t *\n\t\t\t * This helper method makes it easy to modify existing languages. For example, the CSS language definition\n\t\t\t * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded\n\t\t\t * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the\n\t\t\t * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do\n\t\t\t * this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.markup.style = {\n\t\t\t *     // token\n\t\t\t * };\n\t\t\t * ```\n\t\t\t *\n\t\t\t * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens\n\t\t\t * before existing tokens. For the CSS example above, you would use it like this:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'cdata', {\n\t\t\t *     'style': {\n\t\t\t *         // token\n\t\t\t *     }\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Special cases\n\t\t\t *\n\t\t\t * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar\n\t\t\t * will be ignored.\n\t\t\t *\n\t\t\t * This behavior can be used to insert tokens after `before`:\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * Prism.languages.insertBefore('markup', 'comment', {\n\t\t\t *     'comment': Prism.languages.markup.comment,\n\t\t\t *     // tokens after 'comment'\n\t\t\t * });\n\t\t\t * ```\n\t\t\t *\n\t\t\t * ## Limitations\n\t\t\t *\n\t\t\t * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object\n\t\t\t * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave\n\t\t\t * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily\n\t\t\t * deleting properties which is necessary to insert at arbitrary positions.\n\t\t\t *\n\t\t\t * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.\n\t\t\t * Instead, it will create a new object and replace all references to the target object with the new one. This\n\t\t\t * can be done without temporarily deleting properties, so the iteration order is well-defined.\n\t\t\t *\n\t\t\t * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if\n\t\t\t * you hold the target object in a variable, then the value of the variable will not change.\n\t\t\t *\n\t\t\t * ```js\n\t\t\t * var oldMarkup = Prism.languages.markup;\n\t\t\t * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });\n\t\t\t *\n\t\t\t * assert(oldMarkup !== Prism.languages.markup);\n\t\t\t * assert(newMarkup === Prism.languages.markup);\n\t\t\t * ```\n\t\t\t *\n\t\t\t * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the\n\t\t\t * object to be modified.\n\t\t\t * @param {string} before The key to insert before.\n\t\t\t * @param {Grammar} insert An object containing the key-value pairs to be inserted.\n\t\t\t * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the\n\t\t\t * object to be modified.\n\t\t\t *\n\t\t\t * Defaults to `Prism.languages`.\n\t\t\t * @returns {Grammar} The new grammar object.\n\t\t\t * @public\n\t\t\t */\n\t\t\tinsertBefore: function (inside, before, insert, root) {\n\t\t\t\troot = root || /** @type {any} */ (_.languages);\n\t\t\t\tvar grammar = root[inside];\n\t\t\t\t/** @type {Grammar} */\n\t\t\t\tvar ret = {};\n\n\t\t\t\tfor (var token in grammar) {\n\t\t\t\t\tif (grammar.hasOwnProperty(token)) {\n\n\t\t\t\t\t\tif (token == before) {\n\t\t\t\t\t\t\tfor (var newToken in insert) {\n\t\t\t\t\t\t\t\tif (insert.hasOwnProperty(newToken)) {\n\t\t\t\t\t\t\t\t\tret[newToken] = insert[newToken];\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Do not insert token which also occur in insert. See #1525\n\t\t\t\t\t\tif (!insert.hasOwnProperty(token)) {\n\t\t\t\t\t\t\tret[token] = grammar[token];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar old = root[inside];\n\t\t\t\troot[inside] = ret;\n\n\t\t\t\t// Update references in other language definitions\n\t\t\t\t_.languages.DFS(_.languages, function (key, value) {\n\t\t\t\t\tif (value === old && key != inside) {\n\t\t\t\t\t\tthis[key] = ret;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\treturn ret;\n\t\t\t},\n\n\t\t\t// Traverse a language definition with Depth First Search\n\t\t\tDFS: function DFS(o, callback, type, visited) {\n\t\t\t\tvisited = visited || {};\n\n\t\t\t\tvar objId = _.util.objId;\n\n\t\t\t\tfor (var i in o) {\n\t\t\t\t\tif (o.hasOwnProperty(i)) {\n\t\t\t\t\t\tcallback.call(o, i, o[i], type || i);\n\n\t\t\t\t\t\tvar property = o[i];\n\t\t\t\t\t\tvar propertyType = _.util.type(property);\n\n\t\t\t\t\t\tif (propertyType === 'Object' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, null, visited);\n\t\t\t\t\t\t} else if (propertyType === 'Array' && !visited[objId(property)]) {\n\t\t\t\t\t\t\tvisited[objId(property)] = true;\n\t\t\t\t\t\t\tDFS(property, callback, i, visited);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tplugins: {},\n\n\t\t/**\n\t\t * This is the most high-level function in Prism’s API.\n\t\t * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on\n\t\t * each one of them.\n\t\t *\n\t\t * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.\n\t\t *\n\t\t * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAll: function (async, callback) {\n\t\t\t_.highlightAllUnder(document, async, callback);\n\t\t},\n\n\t\t/**\n\t\t * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls\n\t\t * {@link Prism.highlightElement} on each one of them.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-highlightall`\n\t\t * 2. `before-all-elements-highlight`\n\t\t * 3. All hooks of {@link Prism.highlightElement} for each element.\n\t\t *\n\t\t * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.\n\t\t * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightAllUnder: function (container, async, callback) {\n\t\t\tvar env = {\n\t\t\t\tcallback: callback,\n\t\t\t\tcontainer: container,\n\t\t\t\tselector: 'code[class*=\"language-\"], [class*=\"language-\"] code, code[class*=\"lang-\"], [class*=\"lang-\"] code'\n\t\t\t};\n\n\t\t\t_.hooks.run('before-highlightall', env);\n\n\t\t\tenv.elements = Array.prototype.slice.apply(env.container.querySelectorAll(env.selector));\n\n\t\t\t_.hooks.run('before-all-elements-highlight', env);\n\n\t\t\tfor (var i = 0, element; (element = env.elements[i++]);) {\n\t\t\t\t_.highlightElement(element, async === true, env.callback);\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Highlights the code inside a single element.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-sanity-check`\n\t\t * 2. `before-highlight`\n\t\t * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.\n\t\t * 4. `before-insert`\n\t\t * 5. `after-highlight`\n\t\t * 6. `complete`\n\t\t *\n\t\t * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for\n\t\t * the element's language.\n\t\t *\n\t\t * @param {Element} element The element containing the code.\n\t\t * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.\n\t\t * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers\n\t\t * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is\n\t\t * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).\n\t\t *\n\t\t * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for\n\t\t * asynchronous highlighting to work. You can build your own bundle on the\n\t\t * [Download page](https://prismjs.com/download.html).\n\t\t * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.\n\t\t * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thighlightElement: function (element, async, callback) {\n\t\t\t// Find language\n\t\t\tvar language = _.util.getLanguage(element);\n\t\t\tvar grammar = _.languages[language];\n\n\t\t\t// Set language on the element, if not present\n\t\t\t_.util.setLanguage(element, language);\n\n\t\t\t// Set language on the parent, for styling\n\t\t\tvar parent = element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre') {\n\t\t\t\t_.util.setLanguage(parent, language);\n\t\t\t}\n\n\t\t\tvar code = element.textContent;\n\n\t\t\tvar env = {\n\t\t\t\telement: element,\n\t\t\t\tlanguage: language,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tcode: code\n\t\t\t};\n\n\t\t\tfunction insertHighlightedCode(highlightedCode) {\n\t\t\t\tenv.highlightedCode = highlightedCode;\n\n\t\t\t\t_.hooks.run('before-insert', env);\n\n\t\t\t\tenv.element.innerHTML = env.highlightedCode;\n\n\t\t\t\t_.hooks.run('after-highlight', env);\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t}\n\n\t\t\t_.hooks.run('before-sanity-check', env);\n\n\t\t\t// plugins may change/add the parent/element\n\t\t\tparent = env.element.parentElement;\n\t\t\tif (parent && parent.nodeName.toLowerCase() === 'pre' && !parent.hasAttribute('tabindex')) {\n\t\t\t\tparent.setAttribute('tabindex', '0');\n\t\t\t}\n\n\t\t\tif (!env.code) {\n\t\t\t\t_.hooks.run('complete', env);\n\t\t\t\tcallback && callback.call(env.element);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t_.hooks.run('before-highlight', env);\n\n\t\t\tif (!env.grammar) {\n\t\t\t\tinsertHighlightedCode(_.util.encode(env.code));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (async && _self.Worker) {\n\t\t\t\tvar worker = new Worker(_.filename);\n\n\t\t\t\tworker.onmessage = function (evt) {\n\t\t\t\t\tinsertHighlightedCode(evt.data);\n\t\t\t\t};\n\n\t\t\t\tworker.postMessage(JSON.stringify({\n\t\t\t\t\tlanguage: env.language,\n\t\t\t\t\tcode: env.code,\n\t\t\t\t\timmediateClose: true\n\t\t\t\t}));\n\t\t\t} else {\n\t\t\t\tinsertHighlightedCode(_.highlight(env.code, env.grammar, env.language));\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Low-level function, only use if you know what you’re doing. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns a string with the HTML produced.\n\t\t *\n\t\t * The following hooks will be run:\n\t\t * 1. `before-tokenize`\n\t\t * 2. `after-tokenize`\n\t\t * 3. `wrap`: On each {@link Token}.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @param {string} language The name of the language definition passed to `grammar`.\n\t\t * @returns {string} The highlighted HTML.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');\n\t\t */\n\t\thighlight: function (text, grammar, language) {\n\t\t\tvar env = {\n\t\t\t\tcode: text,\n\t\t\t\tgrammar: grammar,\n\t\t\t\tlanguage: language\n\t\t\t};\n\t\t\t_.hooks.run('before-tokenize', env);\n\t\t\tif (!env.grammar) {\n\t\t\t\tthrow new Error('The language \"' + env.language + '\" has no grammar.');\n\t\t\t}\n\t\t\tenv.tokens = _.tokenize(env.code, env.grammar);\n\t\t\t_.hooks.run('after-tokenize', env);\n\t\t\treturn Token.stringify(_.util.encode(env.tokens), env.language);\n\t\t},\n\n\t\t/**\n\t\t * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input\n\t\t * and the language definitions to use, and returns an array with the tokenized code.\n\t\t *\n\t\t * When the language definition includes nested tokens, the function is called recursively on each of these tokens.\n\t\t *\n\t\t * This method could be useful in other contexts as well, as a very crude parser.\n\t\t *\n\t\t * @param {string} text A string with the code to be highlighted.\n\t\t * @param {Grammar} grammar An object containing the tokens to use.\n\t\t *\n\t\t * Usually a language definition like `Prism.languages.markup`.\n\t\t * @returns {TokenStream} An array of strings and tokens, a token stream.\n\t\t * @memberof Prism\n\t\t * @public\n\t\t * @example\n\t\t * let code = `var foo = 0;`;\n\t\t * let tokens = Prism.tokenize(code, Prism.languages.javascript);\n\t\t * tokens.forEach(token => {\n\t\t *     if (token instanceof Prism.Token && token.type === 'number') {\n\t\t *         console.log(`Found numeric literal: ${token.content}`);\n\t\t *     }\n\t\t * });\n\t\t */\n\t\ttokenize: function (text, grammar) {\n\t\t\tvar rest = grammar.rest;\n\t\t\tif (rest) {\n\t\t\t\tfor (var token in rest) {\n\t\t\t\t\tgrammar[token] = rest[token];\n\t\t\t\t}\n\n\t\t\t\tdelete grammar.rest;\n\t\t\t}\n\n\t\t\tvar tokenList = new LinkedList();\n\t\t\taddAfter(tokenList, tokenList.head, text);\n\n\t\t\tmatchGrammar(text, tokenList, grammar, tokenList.head, 0);\n\n\t\t\treturn toArray(tokenList);\n\t\t},\n\n\t\t/**\n\t\t * @namespace\n\t\t * @memberof Prism\n\t\t * @public\n\t\t */\n\t\thooks: {\n\t\t\tall: {},\n\n\t\t\t/**\n\t\t\t * Adds the given callback to the list of callbacks for the given hook.\n\t\t\t *\n\t\t\t * The callback will be invoked when the hook it is registered for is run.\n\t\t\t * Hooks are usually directly run by a highlight function but you can also run hooks yourself.\n\t\t\t *\n\t\t\t * One callback function can be registered to multiple hooks and the same hook multiple times.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {HookCallback} callback The callback function which is given environment variables.\n\t\t\t * @public\n\t\t\t */\n\t\t\tadd: function (name, callback) {\n\t\t\t\tvar hooks = _.hooks.all;\n\n\t\t\t\thooks[name] = hooks[name] || [];\n\n\t\t\t\thooks[name].push(callback);\n\t\t\t},\n\n\t\t\t/**\n\t\t\t * Runs a hook invoking all registered callbacks with the given environment variables.\n\t\t\t *\n\t\t\t * Callbacks will be invoked synchronously and in the order in which they were registered.\n\t\t\t *\n\t\t\t * @param {string} name The name of the hook.\n\t\t\t * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.\n\t\t\t * @public\n\t\t\t */\n\t\t\trun: function (name, env) {\n\t\t\t\tvar callbacks = _.hooks.all[name];\n\n\t\t\t\tif (!callbacks || !callbacks.length) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tfor (var i = 0, callback; (callback = callbacks[i++]);) {\n\t\t\t\t\tcallback(env);\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tToken: Token\n\t};\n\t_self.Prism = _;\n\n\n\t// Typescript note:\n\t// The following can be used to import the Token type in JSDoc:\n\t//\n\t//   @typedef {InstanceType<import(\"./prism-core\")[\"Token\"]>} Token\n\n\t/**\n\t * Creates a new token.\n\t *\n\t * @param {string} type See {@link Token#type type}\n\t * @param {string | TokenStream} content See {@link Token#content content}\n\t * @param {string|string[]} [alias] The alias(es) of the token.\n\t * @param {string} [matchedStr=\"\"] A copy of the full string this token was created from.\n\t * @class\n\t * @global\n\t * @public\n\t */\n\tfunction Token(type, content, alias, matchedStr) {\n\t\t/**\n\t\t * The type of the token.\n\t\t *\n\t\t * This is usually the key of a pattern in a {@link Grammar}.\n\t\t *\n\t\t * @type {string}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.type = type;\n\t\t/**\n\t\t * The strings or tokens contained by this token.\n\t\t *\n\t\t * This will be a token stream if the pattern matched also defined an `inside` grammar.\n\t\t *\n\t\t * @type {string | TokenStream}\n\t\t * @public\n\t\t */\n\t\tthis.content = content;\n\t\t/**\n\t\t * The alias(es) of the token.\n\t\t *\n\t\t * @type {string|string[]}\n\t\t * @see GrammarToken\n\t\t * @public\n\t\t */\n\t\tthis.alias = alias;\n\t\t// Copy of the full string this token was created from\n\t\tthis.length = (matchedStr || '').length | 0;\n\t}\n\n\t/**\n\t * A token stream is an array of strings and {@link Token Token} objects.\n\t *\n\t * Token streams have to fulfill a few properties that are assumed by most functions (mostly internal ones) that process\n\t * them.\n\t *\n\t * 1. No adjacent strings.\n\t * 2. No empty strings.\n\t *\n\t *    The only exception here is the token stream that only contains the empty string and nothing else.\n\t *\n\t * @typedef {Array<string | Token>} TokenStream\n\t * @global\n\t * @public\n\t */\n\n\t/**\n\t * Converts the given token or token stream to an HTML representation.\n\t *\n\t * The following hooks will be run:\n\t * 1. `wrap`: On each {@link Token}.\n\t *\n\t * @param {string | Token | TokenStream} o The token or token stream to be converted.\n\t * @param {string} language The name of current language.\n\t * @returns {string} The HTML representation of the token or token stream.\n\t * @memberof Token\n\t * @static\n\t */\n\tToken.stringify = function stringify(o, language) {\n\t\tif (typeof o == 'string') {\n\t\t\treturn o;\n\t\t}\n\t\tif (Array.isArray(o)) {\n\t\t\tvar s = '';\n\t\t\to.forEach(function (e) {\n\t\t\t\ts += stringify(e, language);\n\t\t\t});\n\t\t\treturn s;\n\t\t}\n\n\t\tvar env = {\n\t\t\ttype: o.type,\n\t\t\tcontent: stringify(o.content, language),\n\t\t\ttag: 'span',\n\t\t\tclasses: ['token', o.type],\n\t\t\tattributes: {},\n\t\t\tlanguage: language\n\t\t};\n\n\t\tvar aliases = o.alias;\n\t\tif (aliases) {\n\t\t\tif (Array.isArray(aliases)) {\n\t\t\t\tArray.prototype.push.apply(env.classes, aliases);\n\t\t\t} else {\n\t\t\t\tenv.classes.push(aliases);\n\t\t\t}\n\t\t}\n\n\t\t_.hooks.run('wrap', env);\n\n\t\tvar attributes = '';\n\t\tfor (var name in env.attributes) {\n\t\t\tattributes += ' ' + name + '=\"' + (env.attributes[name] || '').replace(/\"/g, '&quot;') + '\"';\n\t\t}\n\n\t\treturn '<' + env.tag + ' class=\"' + env.classes.join(' ') + '\"' + attributes + '>' + env.content + '</' + env.tag + '>';\n\t};\n\n\t/**\n\t * @param {RegExp} pattern\n\t * @param {number} pos\n\t * @param {string} text\n\t * @param {boolean} lookbehind\n\t * @returns {RegExpExecArray | null}\n\t */\n\tfunction matchPattern(pattern, pos, text, lookbehind) {\n\t\tpattern.lastIndex = pos;\n\t\tvar match = pattern.exec(text);\n\t\tif (match && lookbehind && match[1]) {\n\t\t\t// change the match to remove the text matched by the Prism lookbehind group\n\t\t\tvar lookbehindLength = match[1].length;\n\t\t\tmatch.index += lookbehindLength;\n\t\t\tmatch[0] = match[0].slice(lookbehindLength);\n\t\t}\n\t\treturn match;\n\t}\n\n\t/**\n\t * @param {string} text\n\t * @param {LinkedList<string | Token>} tokenList\n\t * @param {any} grammar\n\t * @param {LinkedListNode<string | Token>} startNode\n\t * @param {number} startPos\n\t * @param {RematchOptions} [rematch]\n\t * @returns {void}\n\t * @private\n\t *\n\t * @typedef RematchOptions\n\t * @property {string} cause\n\t * @property {number} reach\n\t */\n\tfunction matchGrammar(text, tokenList, grammar, startNode, startPos, rematch) {\n\t\tfor (var token in grammar) {\n\t\t\tif (!grammar.hasOwnProperty(token) || !grammar[token]) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tvar patterns = grammar[token];\n\t\t\tpatterns = Array.isArray(patterns) ? patterns : [patterns];\n\n\t\t\tfor (var j = 0; j < patterns.length; ++j) {\n\t\t\t\tif (rematch && rematch.cause == token + ',' + j) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar patternObj = patterns[j];\n\t\t\t\tvar inside = patternObj.inside;\n\t\t\t\tvar lookbehind = !!patternObj.lookbehind;\n\t\t\t\tvar greedy = !!patternObj.greedy;\n\t\t\t\tvar alias = patternObj.alias;\n\n\t\t\t\tif (greedy && !patternObj.pattern.global) {\n\t\t\t\t\t// Without the global flag, lastIndex won't work\n\t\t\t\t\tvar flags = patternObj.pattern.toString().match(/[imsuy]*$/)[0];\n\t\t\t\t\tpatternObj.pattern = RegExp(patternObj.pattern.source, flags + 'g');\n\t\t\t\t}\n\n\t\t\t\t/** @type {RegExp} */\n\t\t\t\tvar pattern = patternObj.pattern || patternObj;\n\n\t\t\t\tfor ( // iterate the token list and keep track of the current token/string position\n\t\t\t\t\tvar currentNode = startNode.next, pos = startPos;\n\t\t\t\t\tcurrentNode !== tokenList.tail;\n\t\t\t\t\tpos += currentNode.value.length, currentNode = currentNode.next\n\t\t\t\t) {\n\n\t\t\t\t\tif (rematch && pos >= rematch.reach) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar str = currentNode.value;\n\n\t\t\t\t\tif (tokenList.length > text.length) {\n\t\t\t\t\t\t// Something went terribly wrong, ABORT, ABORT!\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (str instanceof Token) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeCount = 1; // this is the to parameter of removeBetween\n\t\t\t\t\tvar match;\n\n\t\t\t\t\tif (greedy) {\n\t\t\t\t\t\tmatch = matchPattern(pattern, pos, text, lookbehind);\n\t\t\t\t\t\tif (!match || match.index >= text.length) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar from = match.index;\n\t\t\t\t\t\tvar to = match.index + match[0].length;\n\t\t\t\t\t\tvar p = pos;\n\n\t\t\t\t\t\t// find the node that contains the match\n\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\twhile (from >= p) {\n\t\t\t\t\t\t\tcurrentNode = currentNode.next;\n\t\t\t\t\t\t\tp += currentNode.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// adjust pos (and p)\n\t\t\t\t\t\tp -= currentNode.value.length;\n\t\t\t\t\t\tpos = p;\n\n\t\t\t\t\t\t// the current node is a Token, then the match starts inside another Token, which is invalid\n\t\t\t\t\t\tif (currentNode.value instanceof Token) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// find the last node which is affected by this match\n\t\t\t\t\t\tfor (\n\t\t\t\t\t\t\tvar k = currentNode;\n\t\t\t\t\t\t\tk !== tokenList.tail && (p < to || typeof k.value === 'string');\n\t\t\t\t\t\t\tk = k.next\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tremoveCount++;\n\t\t\t\t\t\t\tp += k.value.length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tremoveCount--;\n\n\t\t\t\t\t\t// replace with the new match\n\t\t\t\t\t\tstr = text.slice(pos, p);\n\t\t\t\t\t\tmatch.index -= pos;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmatch = matchPattern(pattern, 0, str, lookbehind);\n\t\t\t\t\t\tif (!match) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// eslint-disable-next-line no-redeclare\n\t\t\t\t\tvar from = match.index;\n\t\t\t\t\tvar matchStr = match[0];\n\t\t\t\t\tvar before = str.slice(0, from);\n\t\t\t\t\tvar after = str.slice(from + matchStr.length);\n\n\t\t\t\t\tvar reach = pos + str.length;\n\t\t\t\t\tif (rematch && reach > rematch.reach) {\n\t\t\t\t\t\trematch.reach = reach;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar removeFrom = currentNode.prev;\n\n\t\t\t\t\tif (before) {\n\t\t\t\t\t\tremoveFrom = addAfter(tokenList, removeFrom, before);\n\t\t\t\t\t\tpos += before.length;\n\t\t\t\t\t}\n\n\t\t\t\t\tremoveRange(tokenList, removeFrom, removeCount);\n\n\t\t\t\t\tvar wrapped = new Token(token, inside ? _.tokenize(matchStr, inside) : matchStr, alias, matchStr);\n\t\t\t\t\tcurrentNode = addAfter(tokenList, removeFrom, wrapped);\n\n\t\t\t\t\tif (after) {\n\t\t\t\t\t\taddAfter(tokenList, currentNode, after);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (removeCount > 1) {\n\t\t\t\t\t\t// at least one Token object was removed, so we have to do some rematching\n\t\t\t\t\t\t// this can only happen if the current pattern is greedy\n\n\t\t\t\t\t\t/** @type {RematchOptions} */\n\t\t\t\t\t\tvar nestedRematch = {\n\t\t\t\t\t\t\tcause: token + ',' + j,\n\t\t\t\t\t\t\treach: reach\n\t\t\t\t\t\t};\n\t\t\t\t\t\tmatchGrammar(text, tokenList, grammar, currentNode.prev, pos, nestedRematch);\n\n\t\t\t\t\t\t// the reach might have been extended because of the rematching\n\t\t\t\t\t\tif (rematch && nestedRematch.reach > rematch.reach) {\n\t\t\t\t\t\t\trematch.reach = nestedRematch.reach;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @typedef LinkedListNode\n\t * @property {T} value\n\t * @property {LinkedListNode<T> | null} prev The previous node.\n\t * @property {LinkedListNode<T> | null} next The next node.\n\t * @template T\n\t * @private\n\t */\n\n\t/**\n\t * @template T\n\t * @private\n\t */\n\tfunction LinkedList() {\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar head = { value: null, prev: null, next: null };\n\t\t/** @type {LinkedListNode<T>} */\n\t\tvar tail = { value: null, prev: head, next: null };\n\t\thead.next = tail;\n\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.head = head;\n\t\t/** @type {LinkedListNode<T>} */\n\t\tthis.tail = tail;\n\t\tthis.length = 0;\n\t}\n\n\t/**\n\t * Adds a new node with the given value to the list.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {T} value\n\t * @returns {LinkedListNode<T>} The added node.\n\t * @template T\n\t */\n\tfunction addAfter(list, node, value) {\n\t\t// assumes that node != list.tail && values.length >= 0\n\t\tvar next = node.next;\n\n\t\tvar newNode = { value: value, prev: node, next: next };\n\t\tnode.next = newNode;\n\t\tnext.prev = newNode;\n\t\tlist.length++;\n\n\t\treturn newNode;\n\t}\n\t/**\n\t * Removes `count` nodes after the given node. The given node will not be removed.\n\t *\n\t * @param {LinkedList<T>} list\n\t * @param {LinkedListNode<T>} node\n\t * @param {number} count\n\t * @template T\n\t */\n\tfunction removeRange(list, node, count) {\n\t\tvar next = node.next;\n\t\tfor (var i = 0; i < count && next !== list.tail; i++) {\n\t\t\tnext = next.next;\n\t\t}\n\t\tnode.next = next;\n\t\tnext.prev = node;\n\t\tlist.length -= i;\n\t}\n\t/**\n\t * @param {LinkedList<T>} list\n\t * @returns {T[]}\n\t * @template T\n\t */\n\tfunction toArray(list) {\n\t\tvar array = [];\n\t\tvar node = list.head.next;\n\t\twhile (node !== list.tail) {\n\t\t\tarray.push(node.value);\n\t\t\tnode = node.next;\n\t\t}\n\t\treturn array;\n\t}\n\n\n\tif (!_self.document) {\n\t\tif (!_self.addEventListener) {\n\t\t\t// in Node.js\n\t\t\treturn _;\n\t\t}\n\n\t\tif (!_.disableWorkerMessageHandler) {\n\t\t\t// In worker\n\t\t\t_self.addEventListener('message', function (evt) {\n\t\t\t\tvar message = JSON.parse(evt.data);\n\t\t\t\tvar lang = message.language;\n\t\t\t\tvar code = message.code;\n\t\t\t\tvar immediateClose = message.immediateClose;\n\n\t\t\t\t_self.postMessage(_.highlight(code, _.languages[lang], lang));\n\t\t\t\tif (immediateClose) {\n\t\t\t\t\t_self.close();\n\t\t\t\t}\n\t\t\t}, false);\n\t\t}\n\n\t\treturn _;\n\t}\n\n\t// Get current script and highlight\n\tvar script = _.util.currentScript();\n\n\tif (script) {\n\t\t_.filename = script.src;\n\n\t\tif (script.hasAttribute('data-manual')) {\n\t\t\t_.manual = true;\n\t\t}\n\t}\n\n\tfunction highlightAutomaticallyCallback() {\n\t\tif (!_.manual) {\n\t\t\t_.highlightAll();\n\t\t}\n\t}\n\n\tif (!_.manual) {\n\t\t// If the document state is \"loading\", then we'll use DOMContentLoaded.\n\t\t// If the document state is \"interactive\" and the prism.js script is deferred, then we'll also use the\n\t\t// DOMContentLoaded event because there might be some plugins or languages which have also been deferred and they\n\t\t// might take longer one animation frame to execute which can create a race condition where only some plugins have\n\t\t// been loaded when Prism.highlightAll() is executed, depending on how fast resources are loaded.\n\t\t// See https://github.com/PrismJS/prism/issues/2102\n\t\tvar readyState = document.readyState;\n\t\tif (readyState === 'loading' || readyState === 'interactive' && script && script.defer) {\n\t\t\tdocument.addEventListener('DOMContentLoaded', highlightAutomaticallyCallback);\n\t\t} else {\n\t\t\tif (window.requestAnimationFrame) {\n\t\t\t\twindow.requestAnimationFrame(highlightAutomaticallyCallback);\n\t\t\t} else {\n\t\t\t\twindow.setTimeout(highlightAutomaticallyCallback, 16);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn _;\n\n}(_self));\n\nif (typeof module !== 'undefined' && module.exports) {\n\tmodule.exports = Prism;\n}\n\n// hack for components to work correctly in node.js\nif (typeof global !== 'undefined') {\n\tglobal.Prism = Prism;\n}\n\n// some additional documentation/types\n\n/**\n * The expansion of a simple `RegExp` literal to support additional properties.\n *\n * @typedef GrammarToken\n * @property {RegExp} pattern The regular expression of the token.\n * @property {boolean} [lookbehind=false] If `true`, then the first capturing group of `pattern` will (effectively)\n * behave as a lookbehind group meaning that the captured text will not be part of the matched text of the new token.\n * @property {boolean} [greedy=false] Whether the token is greedy.\n * @property {string|string[]} [alias] An optional alias or list of aliases.\n * @property {Grammar} [inside] The nested grammar of this token.\n *\n * The `inside` grammar will be used to tokenize the text value of each token of this kind.\n *\n * This can be used to make nested and even recursive language definitions.\n *\n * Note: This can cause infinite recursion. Be careful when you embed different languages or even the same language into\n * each another.\n * @global\n * @public\n */\n\n/**\n * @typedef Grammar\n * @type {Object<string, RegExp | GrammarToken | Array<RegExp | GrammarToken>>}\n * @property {Grammar} [rest] An optional grammar object that will be appended to this grammar.\n * @global\n * @public\n */\n\n/**\n * A function which will invoked after an element was successfully highlighted.\n *\n * @callback HighlightCallback\n * @param {Element} element The element successfully highlighted.\n * @returns {void}\n * @global\n * @public\n */\n\n/**\n * @callback HookCallback\n * @param {Object<string, any>} env The environment variables of the hook.\n * @returns {void}\n * @global\n * @public\n */\n","Prism.languages.javascript = Prism.languages.extend('clike', {\n\t'class-name': [\n\t\tPrism.languages.clike['class-name'],\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$A-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\.(?:constructor|prototype))/,\n\t\t\tlookbehind: true\n\t\t}\n\t],\n\t'keyword': [\n\t\t{\n\t\t\tpattern: /((?:^|\\})\\s*)catch\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^.]|\\.\\.\\.\\s*)\\b(?:as|assert(?=\\s*\\{)|async(?=\\s*(?:function\\b|\\(|[$\\w\\xA0-\\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\\s*(?:\\{|$))|for|from(?=\\s*(?:['\"]|$))|function|(?:get|set)(?=\\s*(?:[#\\[$\\w\\xA0-\\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\\b/,\n\t\t\tlookbehind: true\n\t\t},\n\t],\n\t// Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)\n\t'function': /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*(?:\\.\\s*(?:apply|bind|call)\\s*)?\\()/,\n\t'number': {\n\t\tpattern: RegExp(\n\t\t\t/(^|[^\\w$])/.source +\n\t\t\t'(?:' +\n\t\t\t(\n\t\t\t\t// constant\n\t\t\t\t/NaN|Infinity/.source +\n\t\t\t\t'|' +\n\t\t\t\t// binary integer\n\t\t\t\t/0[bB][01]+(?:_[01]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// octal integer\n\t\t\t\t/0[oO][0-7]+(?:_[0-7]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// hexadecimal integer\n\t\t\t\t/0[xX][\\dA-Fa-f]+(?:_[\\dA-Fa-f]+)*n?/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal bigint\n\t\t\t\t/\\d+(?:_\\d+)*n/.source +\n\t\t\t\t'|' +\n\t\t\t\t// decimal number (integer or float) but no bigint\n\t\t\t\t/(?:\\d+(?:_\\d+)*(?:\\.(?:\\d+(?:_\\d+)*)?)?|\\.\\d+(?:_\\d+)*)(?:[Ee][+-]?\\d+(?:_\\d+)*)?/.source\n\t\t\t) +\n\t\t\t')' +\n\t\t\t/(?![\\w$])/.source\n\t\t),\n\t\tlookbehind: true\n\t},\n\t'operator': /--|\\+\\+|\\*\\*=?|=>|&&=?|\\|\\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\\.{3}|\\?\\?=?|\\?\\.?|[~:]/\n});\n\nPrism.languages.javascript['class-name'][0].pattern = /(\\b(?:class|extends|implements|instanceof|interface|new)\\s+)[\\w.\\\\]+/;\n\nPrism.languages.insertBefore('javascript', 'keyword', {\n\t'regex': {\n\t\tpattern: RegExp(\n\t\t\t// lookbehind\n\t\t\t// eslint-disable-next-line regexp/no-dupe-characters-character-class\n\t\t\t/((?:^|[^$\\w\\xA0-\\uFFFF.\"'\\])\\s]|\\b(?:return|yield))\\s*)/.source +\n\t\t\t// Regex pattern:\n\t\t\t// There are 2 regex patterns here. The RegExp set notation proposal added support for nested character\n\t\t\t// classes if the `v` flag is present. Unfortunately, nested CCs are both context-free and incompatible\n\t\t\t// with the only syntax, so we have to define 2 different regex patterns.\n\t\t\t/\\//.source +\n\t\t\t'(?:' +\n\t\t\t/(?:\\[(?:[^\\]\\\\\\r\\n]|\\\\.)*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}/.source +\n\t\t\t'|' +\n\t\t\t// `v` flag syntax. This supports 3 levels of nested character classes.\n\t\t\t/(?:\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.|\\[(?:[^[\\]\\\\\\r\\n]|\\\\.)*\\])*\\])*\\]|\\\\.|[^/\\\\\\[\\r\\n])+\\/[dgimyus]{0,7}v[dgimyus]{0,7}/.source +\n\t\t\t')' +\n\t\t\t// lookahead\n\t\t\t/(?=(?:\\s|\\/\\*(?:[^*]|\\*(?!\\/))*\\*\\/)*(?:$|[\\r\\n,.;:})\\]]|\\/\\/))/.source\n\t\t),\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'regex-source': {\n\t\t\t\tpattern: /^(\\/)[\\s\\S]+(?=\\/[a-z]*$)/,\n\t\t\t\tlookbehind: true,\n\t\t\t\talias: 'language-regex',\n\t\t\t\tinside: Prism.languages.regex\n\t\t\t},\n\t\t\t'regex-delimiter': /^\\/|\\/$/,\n\t\t\t'regex-flags': /^[a-z]+$/,\n\t\t}\n\t},\n\t// This must be declared before keyword because we use \"function\" inside the look-forward\n\t'function-variable': {\n\t\tpattern: /#?(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*[=:]\\s*(?:async\\s*)?(?:\\bfunction\\b|(?:\\((?:[^()]|\\([^()]*\\))*\\)|(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)\\s*=>))/,\n\t\talias: 'function'\n\t},\n\t'parameter': [\n\t\t{\n\t\t\tpattern: /(function(?:\\s+(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*)?\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\))/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(^|[^$\\w\\xA0-\\uFFFF])(?!\\s)[_$a-z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*=>)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /(\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*=>)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t},\n\t\t{\n\t\t\tpattern: /((?:\\b|\\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\\w\\xA0-\\uFFFF]))(?:(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*\\s*)\\(\\s*|\\]\\s*\\(\\s*)(?!\\s)(?:[^()\\s]|\\s+(?![\\s)])|\\([^()]*\\))+(?=\\s*\\)\\s*\\{)/,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages.javascript\n\t\t}\n\t],\n\t'constant': /\\b[A-Z](?:[A-Z_]|\\dx?)*\\b/\n});\n\nPrism.languages.insertBefore('javascript', 'string', {\n\t'hashbang': {\n\t\tpattern: /^#!.*/,\n\t\tgreedy: true,\n\t\talias: 'comment'\n\t},\n\t'template-string': {\n\t\tpattern: /`(?:\\\\[\\s\\S]|\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}|(?!\\$\\{)[^\\\\`])*`/,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'template-punctuation': {\n\t\t\t\tpattern: /^`|`$/,\n\t\t\t\talias: 'string'\n\t\t\t},\n\t\t\t'interpolation': {\n\t\t\t\tpattern: /((?:^|[^\\\\])(?:\\\\{2})*)\\$\\{(?:[^{}]|\\{(?:[^{}]|\\{[^}]*\\})*\\})+\\}/,\n\t\t\t\tlookbehind: true,\n\t\t\t\tinside: {\n\t\t\t\t\t'interpolation-punctuation': {\n\t\t\t\t\t\tpattern: /^\\$\\{|\\}$/,\n\t\t\t\t\t\talias: 'punctuation'\n\t\t\t\t\t},\n\t\t\t\t\trest: Prism.languages.javascript\n\t\t\t\t}\n\t\t\t},\n\t\t\t'string': /[\\s\\S]+/\n\t\t}\n\t},\n\t'string-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)([\"'])(?:\\\\(?:\\r\\n|[\\s\\S])|(?!\\2)[^\\\\\\r\\n])*\\2(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\tgreedy: true,\n\t\talias: 'property'\n\t}\n});\n\nPrism.languages.insertBefore('javascript', 'operator', {\n\t'literal-property': {\n\t\tpattern: /((?:^|[,{])[ \\t]*)(?!\\s)[_$a-zA-Z\\xA0-\\uFFFF](?:(?!\\s)[$\\w\\xA0-\\uFFFF])*(?=\\s*:)/m,\n\t\tlookbehind: true,\n\t\talias: 'property'\n\t},\n});\n\nif (Prism.languages.markup) {\n\tPrism.languages.markup.tag.addInlined('script', 'javascript');\n\n\t// add attribute support for all DOM events.\n\t// https://developer.mozilla.org/en-US/docs/Web/Events#Standard_events\n\tPrism.languages.markup.tag.addAttribute(\n\t\t/on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,\n\t\t'javascript'\n\t);\n}\n\nPrism.languages.js = Prism.languages.javascript;\n"],"names":["render","_vm","this","_c","_self","staticClass","result","_v","_s","_id","codeMode","attrs","highlighter","model","value","content","callback","$$v","expression","directives","name","rawName","domProps","on","$event","target","composing","handleSubmit","staticRenderFns","KEYCODE_ENTER","KEYCODE_TAB","KEYCODE_BACKSPACE","KEYCODE_Y","KEYCODE_Z","KEYCODE_M","KEYCODE_PARENS","KEYCODE_BRACKETS","KEYCODE_QUOTE","KEYCODE_BACK_QUOTE","KEYCODE_ESCAPE","HISTORY_LIMIT","HISTORY_TIME_GAP","isWindows","window","navigator","test","platform","isMacLike","PrismEditor","Vue","props","lineNumbers","type","Boolean","default","autoStyleLineNumbers","readonly","String","highlight","Function","required","tabSize","Number","insertSpaces","ignoreTabKey","placeholder","data","capture","history","stack","offset","lineNumbersHeight","codeData","watch","immediate","handler","newVal","$nextTick","_this","setLineNumbersHeight","_this2","styleLineNumbers","computed","isEmpty","length","lineNumbersCount","totalLines","split","mounted","_recordCurrentState","methods","getComputedStyle","$refs","pre","height","$editor","$lineNumbers","$el","querySelector","editorStyles","btlr","bblr","style","stylesList","forEach","input","textarea","selectionStart","selectionEnd","_recordChange","_getLines","text","position","substring","_applyEdits","record","last","_updateInput","overwrite","slice","count","extras","Math","max","timestamp","Date","now","re","previous","pop","_this$_getLines$pop","match","current","_this$_getLines$pop2","startsWith","push","$emit","handleChange","e","_undoEdit","_redoEdit","min","handleKeyDown","$listeners","keydown","defaultPrevented","keyCode","blur","tabCharacter","repeat","preventDefault","shiftKey","linesBeforeCaret","startLine","endLine","nextValue","map","line","i","join","startLineText","updatedSelection","hasSelection","textBeforeCaret","endsWith","matches","indent","chars","metaKey","ctrlKey","altKey","h","lineNumberWidthCalculator","class","Array","from","keys","_","index","ref","click","_this3","keyup","focus","spellCheck","autocapitalize","autocomplete","autocorrect","preview","innerHTML","editorContainer","components","form","component","Prism","languages","clike","pattern","lookbehind","greedy","inside","WorkerGlobalScope","self","lang","uniqueId","plainTextGrammar","manual","disableWorkerMessageHandler","util","encode","tokens","Token","alias","isArray","replace","o","Object","prototype","toString","call","objId","obj","defineProperty","clone","deepClone","visited","id","key","hasOwnProperty","v","getLanguage","element","m","exec","className","toLowerCase","parentElement","setLanguage","language","RegExp","classList","add","currentScript","document","Error","err","src","scripts","getElementsByTagName","isActive","defaultActivation","no","contains","plain","plaintext","txt","extend","redef","insertBefore","before","insert","root","grammar","ret","token","newToken","old","DFS","property","propertyType","plugins","highlightAll","async","highlightAllUnder","container","env","selector","hooks","run","elements","apply","querySelectorAll","highlightElement","parent","nodeName","code","textContent","insertHighlightedCode","highlightedCode","hasAttribute","setAttribute","Worker","worker","filename","onmessage","evt","postMessage","JSON","stringify","immediateClose","tokenize","rest","tokenList","LinkedList","addAfter","head","matchGrammar","toArray","all","callbacks","matchedStr","matchPattern","pos","lastIndex","lookbehindLength","startNode","startPos","rematch","patterns","j","cause","patternObj","global","flags","source","currentNode","next","tail","reach","str","removeCount","to","p","k","matchStr","after","removeFrom","prev","removeRange","wrapped","nestedRematch","list","node","newNode","array","s","tag","classes","attributes","aliases","addEventListener","message","parse","close","script","highlightAutomaticallyCallback","readyState","defer","requestAnimationFrame","setTimeout","module","exports","javascript","regex","markup","addInlined","addAttribute","js"],"sourceRoot":""}